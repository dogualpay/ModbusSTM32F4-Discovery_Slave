
ModbusSTM32F4-Discovery_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00005320  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005330  20005330  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a81e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000377e  00000000  00000000  0003a85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  0003dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  0003f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002347b  00000000  00000000  00040938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187b6  00000000  00000000  00063db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d676b  00000000  00000000  0007c569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152cd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059e4  00000000  00000000  00152d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084b0 	.word	0x080084b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080084b0 	.word	0x080084b0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d8:	f000 fb98 	bl	8000c0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004dc:	f000 f848 	bl	8000570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e0:	f000 f8da 	bl	8000698 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004e4:	f000 f8ae 	bl	8000644 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	ModbusH.uModbusType = MB_SLAVE;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <main+0x84>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	701a      	strb	r2, [r3, #0]
	ModbusH.port = &huart2;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <main+0x84>)
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <main+0x88>)
 80004f2:	605a      	str	r2, [r3, #4]
	ModbusH.u8id = 1; // For master it must be 0
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	721a      	strb	r2, [r3, #8]
	ModbusH.u16timeOut = 1000;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <main+0x84>)
 80004fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000500:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ModbusH.EN_Port = NULL;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <main+0x84>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
	ModbusH.EN_Port = NULL;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x84>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
	ModbusH.EN_Pin = 0;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <main+0x84>)
 8000512:	2200      	movs	r2, #0
 8000514:	821a      	strh	r2, [r3, #16]
	ModbusH.u16regs = ModbusDATA;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x84>)
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <main+0x8c>)
 800051a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ModbusH.u16regsize = sizeof(ModbusDATA) / sizeof(ModbusDATA[0]);
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <main+0x84>)
 8000520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000524:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	ModbusH.xTypeHW = USART_HW;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <main+0x84>)
 800052a:	2201      	movs	r2, #1
 800052c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	//Initialize Modbus library
	ModbusInit(&ModbusH);
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <main+0x84>)
 8000532:	f003 f823 	bl	800357c <ModbusInit>
	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH);
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x84>)
 8000538:	f003 f8c2 	bl	80036c0 <ModbusStart>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800053c:	f004 fbd4 	bl	8004ce8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <main+0x90>)
 8000542:	2100      	movs	r1, #0
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <main+0x94>)
 8000546:	f004 fc19 	bl	8004d7c <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <main+0x98>)
 800054e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000550:	f004 fbee 	bl	8004d30 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000554:	e7fe      	b.n	8000554 <main+0x80>
 8000556:	bf00      	nop
 8000558:	20000074 	.word	0x20000074
 800055c:	2000002c 	.word	0x2000002c
 8000560:	200001b8 	.word	0x200001b8
 8000564:	0800854c 	.word	0x0800854c
 8000568:	08000955 	.word	0x08000955
 800056c:	20000070 	.word	0x20000070

08000570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 ff8e 	bl	80084a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 80005e4:	2332      	movs	r3, #50	; 0x32
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fe75 	bl	80012e4 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x94>
		Error_Handler();
 8000600:	f000 f9c2 	bl	8000988 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000614:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f8d6 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc2>
		Error_Handler();
 800062e:	f000 f9ab 	bl	8000988 <Error_Handler>
	}
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800067c:	f001 fdaa 	bl	80021d4 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000686:	f000 f97f 	bl	8000988 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000002c 	.word	0x2000002c
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4ba2      	ldr	r3, [pc, #648]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4aa1      	ldr	r2, [pc, #644]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006b8:	f043 0310 	orr.w	r3, r3, #16
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b9f      	ldr	r3, [pc, #636]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b9b      	ldr	r3, [pc, #620]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a9a      	ldr	r2, [pc, #616]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b98      	ldr	r3, [pc, #608]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b94      	ldr	r3, [pc, #592]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a93      	ldr	r2, [pc, #588]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b91      	ldr	r3, [pc, #580]	; (800093c <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b8d      	ldr	r3, [pc, #564]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a8c      	ldr	r2, [pc, #560]	; (800093c <MX_GPIO_Init+0x2a4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b8a      	ldr	r3, [pc, #552]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b86      	ldr	r3, [pc, #536]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a85      	ldr	r2, [pc, #532]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b83      	ldr	r3, [pc, #524]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b7f      	ldr	r3, [pc, #508]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a7e      	ldr	r2, [pc, #504]	; (800093c <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b7c      	ldr	r3, [pc, #496]	; (800093c <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	4879      	ldr	r0, [pc, #484]	; (8000940 <MX_GPIO_Init+0x2a8>)
 800075c:	f000 fda8 	bl	80012b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	4877      	ldr	r0, [pc, #476]	; (8000944 <MX_GPIO_Init+0x2ac>)
 8000766:	f000 fda3 	bl	80012b0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800076a:	2200      	movs	r2, #0
 800076c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000770:	4875      	ldr	r0, [pc, #468]	; (8000948 <MX_GPIO_Init+0x2b0>)
 8000772:	f000 fd9d 	bl	80012b0 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000776:	2308      	movs	r3, #8
 8000778:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	486c      	ldr	r0, [pc, #432]	; (8000940 <MX_GPIO_Init+0x2a8>)
 800078e:	f000 fbf3 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4866      	ldr	r0, [pc, #408]	; (8000944 <MX_GPIO_Init+0x2ac>)
 80007aa:	f000 fbe5 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ae:	2308      	movs	r3, #8
 80007b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007be:	2305      	movs	r3, #5
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	485e      	ldr	r0, [pc, #376]	; (8000944 <MX_GPIO_Init+0x2ac>)
 80007ca:	f000 fbd5 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	485a      	ldr	r0, [pc, #360]	; (800094c <MX_GPIO_Init+0x2b4>)
 80007e4:	f000 fbc8 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007e8:	2310      	movs	r3, #16
 80007ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007f8:	2306      	movs	r3, #6
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4852      	ldr	r0, [pc, #328]	; (800094c <MX_GPIO_Init+0x2b4>)
 8000804:	f000 fbb8 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000808:	23e0      	movs	r3, #224	; 0xe0
 800080a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000818:	2305      	movs	r3, #5
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	484a      	ldr	r0, [pc, #296]	; (800094c <MX_GPIO_Init+0x2b4>)
 8000824:	f000 fba8 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000828:	2304      	movs	r3, #4
 800082a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4845      	ldr	r0, [pc, #276]	; (8000950 <MX_GPIO_Init+0x2b8>)
 800083c:	f000 fb9c 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000844:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	483c      	ldr	r0, [pc, #240]	; (8000950 <MX_GPIO_Init+0x2b8>)
 800085e:	f000 fb8b 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000862:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000866:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4833      	ldr	r0, [pc, #204]	; (8000948 <MX_GPIO_Init+0x2b0>)
 800087c:	f000 fb7c 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000880:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000884:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000892:	2306      	movs	r3, #6
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4829      	ldr	r0, [pc, #164]	; (8000944 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fb6b 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4825      	ldr	r0, [pc, #148]	; (800094c <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fb5e 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 80008bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ce:	230a      	movs	r3, #10
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <MX_GPIO_Init+0x2b4>)
 80008da:	f000 fb4d 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008de:	2320      	movs	r3, #32
 80008e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4815      	ldr	r0, [pc, #84]	; (8000948 <MX_GPIO_Init+0x2b0>)
 80008f2:	f000 fb41 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80008f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fc:	2312      	movs	r3, #18
 80008fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000908:	2304      	movs	r3, #4
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <MX_GPIO_Init+0x2b8>)
 8000914:	f000 fb30 	bl	8000f78 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x2a8>)
 800092e:	f000 fb23 	bl	8000f78 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f004 fa9f 	bl	8004ea0 <osDelay>
 8000962:	e7fb      	b.n	800095c <StartDefaultTask+0x8>

08000964 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000976:	f000 f96b 	bl	8000c50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40001000 	.word	0x40001000

08000988 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fa11 	bl	8000e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d133      	bne.n	8000a76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_UART_MspInit+0x98>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_UART_MspInit+0x98>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_UART_MspInit+0x98>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x98>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_UART_MspInit+0x98>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_UART_MspInit+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a56:	2307      	movs	r3, #7
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <HAL_UART_MspInit+0x9c>)
 8000a62:	f000 fa89 	bl	8000f78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2026      	movs	r0, #38	; 0x26
 8000a6c:	f000 f9c8 	bl	8000e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a70:	2026      	movs	r0, #38	; 0x26
 8000a72:	f000 f9e1 	bl	8000e38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2036      	movs	r0, #54	; 0x36
 8000aa2:	f000 f9ad 	bl	8000e00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa6:	2036      	movs	r0, #54	; 0x36
 8000aa8:	f000 f9c6 	bl	8000e38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_InitTick+0xa4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_InitTick+0xa4>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac8:	f107 0210 	add.w	r2, r7, #16
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f89e 	bl	8001c14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ad8:	f001 f874 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8000adc:	4603      	mov	r3, r0
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <HAL_InitTick+0xa8>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	0c9b      	lsrs	r3, r3, #18
 8000aec:	3b01      	subs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_InitTick+0xac>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <HAL_InitTick+0xb0>)
 8000af4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_InitTick+0xac>)
 8000af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000afc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_InitTick+0xac>)
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_InitTick+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_InitTick+0xac>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <HAL_InitTick+0xac>)
 8000b12:	f001 f8b1 	bl	8001c78 <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d104      	bne.n	8000b26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <HAL_InitTick+0xac>)
 8000b1e:	f001 f905 	bl	8001d2c <HAL_TIM_Base_Start_IT>
 8000b22:	4603      	mov	r3, r0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	431bde83 	.word	0x431bde83
 8000b38:	20000988 	.word	0x20000988
 8000b3c:	40001000 	.word	0x40001000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <USART2_IRQHandler+0x10>)
 8000b72:	f001 fca3 	bl	80024bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000002c 	.word	0x2000002c

08000b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM6_DAC_IRQHandler+0x10>)
 8000b86:	f001 f941 	bl	8001e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000988 	.word	0x20000988

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f007 fc29 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fc73 	bl	80004d4 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bfc:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 8000c00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c04:	20005330 	.word	0x20005330

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f8d8 	bl	8000dea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f7ff ff26 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fea8 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	200009d0 	.word	0x200009d0

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200009d0 	.word	0x200009d0

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <__NVIC_EnableIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff4c 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e12:	f7ff ff61 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ffb1 	bl	8000d84 <NVIC_EncodePriority>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff80 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff54 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e62:	f7ff ff09 	bl	8000c78 <HAL_GetTick>
 8000e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d008      	beq.n	8000e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e052      	b.n	8000f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0216 	bic.w	r2, r2, #22
 8000e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <HAL_DMA_Abort+0x62>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0208 	bic.w	r2, r2, #8
 8000ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed6:	e013      	b.n	8000f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ed8:	f7ff fece 	bl	8000c78 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d90c      	bls.n	8000f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2203      	movs	r2, #3
 8000ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e015      	b.n	8000f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e4      	bne.n	8000ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f12:	223f      	movs	r2, #63	; 0x3f
 8000f14:	409a      	lsls	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d004      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00c      	b.n	8000f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e16b      	b.n	800126c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 815a 	bne.w	8001266 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80b4 	beq.w	8001266 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b60      	ldr	r3, [pc, #384]	; (8001284 <HAL_GPIO_Init+0x30c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a5f      	ldr	r2, [pc, #380]	; (8001284 <HAL_GPIO_Init+0x30c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_GPIO_Init+0x30c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111a:	4a5b      	ldr	r2, [pc, #364]	; (8001288 <HAL_GPIO_Init+0x310>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_GPIO_Init+0x314>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d02b      	beq.n	800119e <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a51      	ldr	r2, [pc, #324]	; (8001290 <HAL_GPIO_Init+0x318>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a50      	ldr	r2, [pc, #320]	; (8001294 <HAL_GPIO_Init+0x31c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x320>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x21a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4e      	ldr	r2, [pc, #312]	; (800129c <HAL_GPIO_Init+0x324>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x216>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x328>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x212>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_GPIO_Init+0x32c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x20e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_GPIO_Init+0x330>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x20a>
 800117e:	2307      	movs	r3, #7
 8001180:	e00e      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001182:	2308      	movs	r3, #8
 8001184:	e00c      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001186:	2306      	movs	r3, #6
 8001188:	e00a      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800118a:	2305      	movs	r3, #5
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800118e:	2304      	movs	r3, #4
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x228>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <HAL_GPIO_Init+0x310>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a32      	ldr	r2, [pc, #200]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_GPIO_Init+0x334>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_GPIO_Init+0x334>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f ae90 	bls.w	8000f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40021c00 	.word	0x40021c00
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e267      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d075      	beq.n	80013ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b04      	cmp	r3, #4
 800130c:	d00c      	beq.n	8001328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001316:	2b08      	cmp	r3, #8
 8001318:	d112      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4b82      	ldr	r3, [pc, #520]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4b7e      	ldr	r3, [pc, #504]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d05b      	beq.n	80013ec <HAL_RCC_OscConfig+0x108>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d157      	bne.n	80013ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e242      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x74>
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a75      	ldr	r2, [pc, #468]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0xb0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b70      	ldr	r3, [pc, #448]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6f      	ldr	r2, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b6d      	ldr	r3, [pc, #436]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6c      	ldr	r2, [pc, #432]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xb0>
 800137c:	4b69      	ldr	r3, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a68      	ldr	r2, [pc, #416]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a65      	ldr	r2, [pc, #404]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc6c 	bl	8000c78 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc68 	bl	8000c78 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e207      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0xc0>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc58 	bl	8000c78 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fc54 	bl	8000c78 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e1f3      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	4b51      	ldr	r3, [pc, #324]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0xe8>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140e:	2b08      	cmp	r3, #8
 8001410:	d11c      	bne.n	800144c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x152>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e1c7      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4937      	ldr	r1, [pc, #220]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	e03a      	b.n	80014c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_OscConfig+0x244>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fc0d 	bl	8000c78 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff fc09 	bl	8000c78 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e1a8      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4925      	ldr	r1, [pc, #148]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_RCC_OscConfig+0x244>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fbec 	bl	8000c78 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fbe8 	bl	8000c78 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e187      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d036      	beq.n	800153c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d016      	beq.n	8001504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_RCC_OscConfig+0x248>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbcc 	bl	8000c78 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fbc8 	bl	8000c78 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e167      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x240>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x200>
 8001502:	e01b      	b.n	800153c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RCC_OscConfig+0x248>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fbb5 	bl	8000c78 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	e00e      	b.n	8001530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fbb1 	bl	8000c78 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d907      	bls.n	8001530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e150      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
 8001524:	40023800 	.word	0x40023800
 8001528:	42470000 	.word	0x42470000
 800152c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4b88      	ldr	r3, [pc, #544]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ea      	bne.n	8001512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8097 	beq.w	8001678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154e:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b7d      	ldr	r3, [pc, #500]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a7c      	ldr	r2, [pc, #496]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b7a      	ldr	r3, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b77      	ldr	r3, [pc, #476]	; (8001758 <HAL_RCC_OscConfig+0x474>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b74      	ldr	r3, [pc, #464]	; (8001758 <HAL_RCC_OscConfig+0x474>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a73      	ldr	r2, [pc, #460]	; (8001758 <HAL_RCC_OscConfig+0x474>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb71 	bl	8000c78 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fb6d 	bl	8000c78 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e10c      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x474>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x2ea>
 80015c0:	4b64      	ldr	r3, [pc, #400]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a63      	ldr	r2, [pc, #396]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x324>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x30c>
 80015d6:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a5e      	ldr	r2, [pc, #376]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b5c      	ldr	r3, [pc, #368]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a5b      	ldr	r2, [pc, #364]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0x324>
 80015f0:	4b58      	ldr	r3, [pc, #352]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a57      	ldr	r2, [pc, #348]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	4b55      	ldr	r3, [pc, #340]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a54      	ldr	r2, [pc, #336]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fb32 	bl	8000c78 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fb2e 	bl	8000c78 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0cb      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ee      	beq.n	8001618 <HAL_RCC_OscConfig+0x334>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff fb1c 	bl	8000c78 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fb18 	bl	8000c78 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0b5      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ee      	bne.n	8001644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	4a38      	ldr	r2, [pc, #224]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a1 	beq.w	80017c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d05c      	beq.n	8001748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d141      	bne.n	800171a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_RCC_OscConfig+0x478>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff faec 	bl	8000c78 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fae8 	bl	8000c78 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e087      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	3b01      	subs	r3, #1
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	491b      	ldr	r1, [pc, #108]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x478>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fac1 	bl	8000c78 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fabd 	bl	8000c78 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e05c      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x416>
 8001718:	e054      	b.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x478>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff faaa 	bl	8000c78 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff faa6 	bl	8000c78 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e045      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_OscConfig+0x470>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
 8001746:	e03d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e038      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000
 800175c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x4ec>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d028      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d121      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d11a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001798:	4293      	cmp	r3, r2
 800179a:	d111      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0cc      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b68      	ldr	r3, [pc, #416]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d90c      	bls.n	8001810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b65      	ldr	r3, [pc, #404]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d044      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d119      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e067      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4934      	ldr	r1, [pc, #208]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f9d8 	bl	8000c78 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f9d4 	bl	8000c78 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d20c      	bcs.n	800191c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f886 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	40023800 	.word	0x40023800
 8001994:	08008570 	.word	0x08008570
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a4:	b094      	sub	sp, #80	; 0x50
 80019a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	647b      	str	r3, [r7, #68]	; 0x44
 80019ac:	2300      	movs	r3, #0
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b0:	2300      	movs	r3, #0
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d00d      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x40>
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	f200 80e1 	bhi.w	8001b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d003      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x3a>
 80019d2:	e0db      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019d8:	e0db      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019da:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019de:	e0d8      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e0:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ea:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d063      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	2200      	movs	r2, #0
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a12:	4622      	mov	r2, r4
 8001a14:	462b      	mov	r3, r5
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	0159      	lsls	r1, r3, #5
 8001a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a24:	0150      	lsls	r0, r2, #5
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	1a51      	subs	r1, r2, r1
 8001a2e:	6139      	str	r1, [r7, #16]
 8001a30:	4629      	mov	r1, r5
 8001a32:	eb63 0301 	sbc.w	r3, r3, r1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a44:	4659      	mov	r1, fp
 8001a46:	018b      	lsls	r3, r1, #6
 8001a48:	4651      	mov	r1, sl
 8001a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4e:	4651      	mov	r1, sl
 8001a50:	018a      	lsls	r2, r1, #6
 8001a52:	4651      	mov	r1, sl
 8001a54:	ebb2 0801 	subs.w	r8, r2, r1
 8001a58:	4659      	mov	r1, fp
 8001a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a72:	4690      	mov	r8, r2
 8001a74:	4699      	mov	r9, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	eb18 0303 	adds.w	r3, r8, r3
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	462b      	mov	r3, r5
 8001a80:	eb49 0303 	adc.w	r3, r9, r3
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a92:	4629      	mov	r1, r5
 8001a94:	024b      	lsls	r3, r1, #9
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	024a      	lsls	r2, r1, #9
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ab0:	f7fe fb8e 	bl	80001d0 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001abc:	e058      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4611      	mov	r1, r2
 8001aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ad8:	4642      	mov	r2, r8
 8001ada:	464b      	mov	r3, r9
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0159      	lsls	r1, r3, #5
 8001ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aea:	0150      	lsls	r0, r2, #5
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4641      	mov	r1, r8
 8001af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001af6:	4649      	mov	r1, r9
 8001af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b10:	ebb2 040a 	subs.w	r4, r2, sl
 8001b14:	eb63 050b 	sbc.w	r5, r3, fp
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	00eb      	lsls	r3, r5, #3
 8001b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b26:	00e2      	lsls	r2, r4, #3
 8001b28:	4614      	mov	r4, r2
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	18e3      	adds	r3, r4, r3
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	464b      	mov	r3, r9
 8001b34:	eb45 0303 	adc.w	r3, r5, r3
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b46:	4629      	mov	r1, r5
 8001b48:	028b      	lsls	r3, r1, #10
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b50:	4621      	mov	r1, r4
 8001b52:	028a      	lsls	r2, r1, #10
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	61fa      	str	r2, [r7, #28]
 8001b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b64:	f7fe fb34 	bl	80001d0 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3750      	adds	r7, #80	; 0x50
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc8:	f7ff fff0 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0a9b      	lsrs	r3, r3, #10
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08008580 	.word	0x08008580

08001bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf0:	f7ff ffdc 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0b5b      	lsrs	r3, r3, #13
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4903      	ldr	r1, [pc, #12]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08008580 	.word	0x08008580

08001c14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	220f      	movs	r2, #15
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_GetClockConfig+0x60>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0207 	and.w	r2, r3, #7
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e041      	b.n	8001d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f839 	bl	8001d16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 f9d8 	bl	800206c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d001      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e04e      	b.n	8001de2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d022      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6e:	d01d      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d018      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00e      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d111      	bne.n	8001dd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d010      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dce:	e007      	b.n	8001de0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40010400 	.word	0x40010400
 8001e04:	40014000 	.word	0x40014000
 8001e08:	40001800 	.word	0x40001800

08001e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0202 	mvn.w	r2, #2
 8001e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8ee 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8e0 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8f1 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0204 	mvn.w	r2, #4
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8c4 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8b6 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8c7 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0208 	mvn.w	r2, #8
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f89a 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f88c 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f89d 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b10      	cmp	r3, #16
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0210 	mvn.w	r2, #16
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f870 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f862 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f873 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0201 	mvn.w	r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fcea 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b80      	cmp	r3, #128	; 0x80
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f902 	bl	80021c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b40      	cmp	r3, #64	; 0x40
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f838 	bl	8002058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b20      	cmp	r3, #32
 8002002:	d107      	bne.n	8002014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0220 	mvn.w	r2, #32
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8cc 	bl	80021ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a40      	ldr	r2, [pc, #256]	; (8002180 <TIM_Base_SetConfig+0x114>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d00f      	beq.n	80020ac <TIM_Base_SetConfig+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <TIM_Base_SetConfig+0x118>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00b      	beq.n	80020ac <TIM_Base_SetConfig+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <TIM_Base_SetConfig+0x11c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3b      	ldr	r2, [pc, #236]	; (800218c <TIM_Base_SetConfig+0x120>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <TIM_Base_SetConfig+0x124>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d108      	bne.n	80020be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <TIM_Base_SetConfig+0x114>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02b      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020cc:	d027      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <TIM_Base_SetConfig+0x118>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d023      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <TIM_Base_SetConfig+0x11c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <TIM_Base_SetConfig+0x120>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01b      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a29      	ldr	r2, [pc, #164]	; (8002190 <TIM_Base_SetConfig+0x124>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d017      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a28      	ldr	r2, [pc, #160]	; (8002194 <TIM_Base_SetConfig+0x128>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <TIM_Base_SetConfig+0x12c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00f      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <TIM_Base_SetConfig+0x130>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00b      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <TIM_Base_SetConfig+0x134>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <TIM_Base_SetConfig+0x138>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <TIM_Base_SetConfig+0x13c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <TIM_Base_SetConfig+0x114>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0xf8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <TIM_Base_SetConfig+0x124>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d103      	bne.n	800216c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	615a      	str	r2, [r3, #20]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40010400 	.word	0x40010400
 8002194:	40014000 	.word	0x40014000
 8002198:	40014400 	.word	0x40014400
 800219c:	40014800 	.word	0x40014800
 80021a0:	40001800 	.word	0x40001800
 80021a4:	40001c00 	.word	0x40001c00
 80021a8:	40002000 	.word	0x40002000

080021ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e03f      	b.n	8002266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fbf6 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fe73 	bl	8002f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800222c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800223c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800224c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	4613      	mov	r3, r2
 800227a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b20      	cmp	r3, #32
 8002286:	d130      	bne.n	80022ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_UART_Transmit_IT+0x26>
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e029      	b.n	80022ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_Transmit_IT+0x38>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e022      	b.n	80022ec <HAL_UART_Transmit_IT+0x7e>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	88fa      	ldrh	r2, [r7, #6]
 80022be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2221      	movs	r2, #33	; 0x21
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d11d      	bne.n	800234e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_UART_Receive_IT+0x26>
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e016      	b.n	8002350 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_UART_Receive_IT+0x38>
 800232c:	2302      	movs	r3, #2
 800232e:	e00f      	b.n	8002350 <HAL_UART_Receive_IT+0x58>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	461a      	mov	r2, r3
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fbed 	bl	8002b24 <UART_Start_Receive_IT>
 800234a:	4603      	mov	r3, r0
 800234c:	e000      	b.n	8002350 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b09a      	sub	sp, #104	; 0x68
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	e853 3f00 	ldrex	r3, [r3]
 800236e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002380:	657a      	str	r2, [r7, #84]	; 0x54
 8002382:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002384:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002386:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002388:	e841 2300 	strex	r3, r2, [r1]
 800238c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e5      	bne.n	8002360 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3314      	adds	r3, #20
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239e:	e853 3f00 	ldrex	r3, [r3]
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	663b      	str	r3, [r7, #96]	; 0x60
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023b4:	643a      	str	r2, [r7, #64]	; 0x40
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023bc:	e841 2300 	strex	r3, r2, [r1]
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e5      	bne.n	8002394 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d119      	bne.n	8002404 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	61fb      	str	r3, [r7, #28]
   return(result);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f023 0310 	bic.w	r3, r3, #16
 80023e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f8:	e841 2300 	strex	r3, r2, [r1]
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d13f      	bne.n	8002492 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3314      	adds	r3, #20
 8002418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	60bb      	str	r3, [r7, #8]
   return(result);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002428:	65bb      	str	r3, [r7, #88]	; 0x58
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002432:	61ba      	str	r2, [r7, #24]
 8002434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	613b      	str	r3, [r7, #16]
   return(result);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e5      	bne.n	8002412 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_UART_AbortReceive_IT+0x160>)
 8002454:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fd6a 	bl	8000f34 <HAL_DMA_Abort_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d022      	beq.n	80024ac <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002470:	4610      	mov	r0, r2
 8002472:	4798      	blx	r3
 8002474:	e01a      	b.n	80024ac <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 faae 	bl	80029ec <HAL_UART_AbortReceiveCpltCallback>
 8002490:	e00c      	b.n	80024ac <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 faa0 	bl	80029ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3768      	adds	r7, #104	; 0x68
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	08002c8f 	.word	0x08002c8f

080024bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0ba      	sub	sp, #232	; 0xe8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_UART_IRQHandler+0x66>
 800250e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fc37 	bl	8002d8e <UART_Receive_IT>
      return;
 8002520:	e256      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80de 	beq.w	80026e8 <HAL_UART_IRQHandler+0x22c>
 800252c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80d1 	beq.w	80026e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_UART_IRQHandler+0xae>
 8002552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_UART_IRQHandler+0xd2>
 8002576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0202 	orr.w	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_UART_IRQHandler+0xf6>
 800259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d011      	beq.n	80025e2 <HAL_UART_IRQHandler+0x126>
 80025be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0208 	orr.w	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 81ed 	beq.w	80029c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_UART_IRQHandler+0x14e>
 80025f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fbc2 	bl	8002d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_UART_IRQHandler+0x17a>
 800262e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d04f      	beq.n	80026d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fab2 	bl	8002ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d141      	bne.n	80026ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3314      	adds	r3, #20
 8002650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002658:	e853 3f00 	ldrex	r3, [r3]
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3314      	adds	r3, #20
 8002672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002676:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800267a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800268e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1d9      	bne.n	800264a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	2b00      	cmp	r3, #0
 800269c:	d013      	beq.n	80026c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_UART_IRQHandler+0x3dc>)
 80026a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fc42 	bl	8000f34 <HAL_DMA_Abort_IT>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026c0:	4610      	mov	r0, r2
 80026c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e00e      	b.n	80026e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f986 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e00a      	b.n	80026e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f982 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e006      	b.n	80026e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f97e 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026e2:	e170      	b.n	80029c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	bf00      	nop
    return;
 80026e6:	e16e      	b.n	80029c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 814a 	bne.w	8002986 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8143 	beq.w	8002986 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 813c 	beq.w	8002986 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	f040 80b4 	bne.w	800289c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8140 	beq.w	80029ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800274e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002752:	429a      	cmp	r2, r3
 8002754:	f080 8139 	bcs.w	80029ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800275e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276a:	f000 8088 	beq.w	800287e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800278c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800279a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800279e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1d9      	bne.n	800276e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3314      	adds	r3, #20
 80027da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e1      	bne.n	80027ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3314      	adds	r3, #20
 8002816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800281a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800281c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e3      	bne.n	80027f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800284c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284e:	f023 0310 	bic.w	r3, r3, #16
 8002852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002860:	65ba      	str	r2, [r7, #88]	; 0x58
 8002862:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002864:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002866:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002868:	e841 2300 	strex	r3, r2, [r1]
 800286c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800286e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e3      	bne.n	800283c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe faeb 	bl	8000e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002886:	b29b      	uxth	r3, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b29b      	uxth	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8b6 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002894:	e099      	b.n	80029ca <HAL_UART_IRQHandler+0x50e>
 8002896:	bf00      	nop
 8002898:	08002c67 	.word	0x08002c67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 808b 	beq.w	80029ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8086 	beq.w	80029ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	330c      	adds	r3, #12
 80028e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028e6:	647a      	str	r2, [r7, #68]	; 0x44
 80028e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ee:	e841 2300 	strex	r3, r2, [r1]
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e3      	bne.n	80028c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3314      	adds	r3, #20
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	623b      	str	r3, [r7, #32]
   return(result);
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3314      	adds	r3, #20
 800291a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800291e:	633a      	str	r2, [r7, #48]	; 0x30
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e3      	bne.n	80028fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	e853 3f00 	ldrex	r3, [r3]
 800294e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0310 	bic.w	r3, r3, #16
 8002956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002964:	61fa      	str	r2, [r7, #28]
 8002966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	69b9      	ldr	r1, [r7, #24]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	e841 2300 	strex	r3, r2, [r1]
 8002970:	617b      	str	r3, [r7, #20]
   return(result);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e3      	bne.n	8002940 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f83e 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002984:	e023      	b.n	80029ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_UART_IRQHandler+0x4ea>
 8002992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f98d 	bl	8002cbe <UART_Transmit_IT>
    return;
 80029a4:	e014      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00e      	beq.n	80029d0 <HAL_UART_IRQHandler+0x514>
 80029b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9cd 	bl	8002d5e <UART_EndTransmit_IT>
    return;
 80029c4:	e004      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
    return;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
      return;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HAL_UART_IRQHandler+0x514>
      return;
 80029ce:	bf00      	nop
  }
}
 80029d0:	37e8      	adds	r7, #232	; 0xe8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop

080029d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e020      	b.n	8002a74 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2224      	movs	r2, #36	; 0x24
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 030c 	bic.w	r3, r3, #12
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e020      	b.n	8002adc <HAL_HalfDuplex_EnableReceiver+0x5c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2224      	movs	r2, #36	; 0x24
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f023 030c 	bic.w	r3, r3, #12
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b2db      	uxtb	r3, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2222      	movs	r2, #34	; 0x22
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0220 	orr.w	r2, r2, #32
 8002b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b095      	sub	sp, #84	; 0x54
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc8:	643a      	str	r2, [r7, #64]	; 0x40
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e5      	bne.n	8002ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3314      	adds	r3, #20
 8002be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c04:	e841 2300 	strex	r3, r2, [r1]
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e5      	bne.n	8002bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d119      	bne.n	8002c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 0310 	bic.w	r3, r3, #16
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c38:	61ba      	str	r2, [r7, #24]
 8002c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6979      	ldr	r1, [r7, #20]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	613b      	str	r3, [r7, #16]
   return(result);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c5a:	bf00      	nop
 8002c5c:	3754      	adds	r7, #84	; 0x54
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff fea9 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f7ff fe9b 	bl	80029ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b21      	cmp	r3, #33	; 0x21
 8002cd0:	d13e      	bne.n	8002d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d114      	bne.n	8002d06 <UART_Transmit_IT+0x48>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d110      	bne.n	8002d06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	1c9a      	adds	r2, r3, #2
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	621a      	str	r2, [r3, #32]
 8002d04:	e008      	b.n	8002d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	1c59      	adds	r1, r3, #1
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6211      	str	r1, [r2, #32]
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4619      	mov	r1, r3
 8002d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 fec6 	bl	8004b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08c      	sub	sp, #48	; 0x30
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b22      	cmp	r3, #34	; 0x22
 8002da0:	f040 80ab 	bne.w	8002efa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d117      	bne.n	8002dde <UART_Receive_IT+0x50>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d113      	bne.n	8002dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
 8002ddc:	e026      	b.n	8002e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d007      	beq.n	8002e02 <UART_Receive_IT+0x74>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <UART_Receive_IT+0x82>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e008      	b.n	8002e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d15a      	bne.n	8002ef6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0220 	bic.w	r2, r2, #32
 8002e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d135      	bne.n	8002eec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	613b      	str	r3, [r7, #16]
   return(result);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f023 0310 	bic.w	r3, r3, #16
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	623a      	str	r2, [r7, #32]
 8002ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	69f9      	ldr	r1, [r7, #28]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d10a      	bne.n	8002ede <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fd8b 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
 8002eea:	e002      	b.n	8002ef2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f001 fe4d 	bl	8004b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e002      	b.n	8002efc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0c0      	sub	sp, #256	; 0x100
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	ea40 0301 	orr.w	r3, r0, r1
 8002f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f5c:	f021 010c 	bic.w	r1, r1, #12
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	6999      	ldr	r1, [r3, #24]
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	ea40 0301 	orr.w	r3, r0, r1
 8002f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b8f      	ldr	r3, [pc, #572]	; (80031d0 <UART_SetConfig+0x2cc>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0xa0>
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <UART_SetConfig+0x2d0>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d104      	bne.n	8002fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7fe fe22 	bl	8001bec <HAL_RCC_GetPCLK2Freq>
 8002fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fac:	e003      	b.n	8002fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fae:	f7fe fe09 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8002fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc0:	f040 810c 	bne.w	80031dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	1891      	adds	r1, r2, r2
 8002fdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	eb12 0801 	adds.w	r8, r2, r1
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb43 0901 	adc.w	r9, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb18 0303 	adds.w	r3, r8, r3
 8003010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003014:	462b      	mov	r3, r5
 8003016:	eb49 0303 	adc.w	r3, r9, r3
 800301a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800302a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800302e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003032:	460b      	mov	r3, r1
 8003034:	18db      	adds	r3, r3, r3
 8003036:	653b      	str	r3, [r7, #80]	; 0x50
 8003038:	4613      	mov	r3, r2
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	657b      	str	r3, [r7, #84]	; 0x54
 8003040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003048:	f7fd f8c2 	bl	80001d0 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <UART_SetConfig+0x2d4>)
 8003052:	fba3 2302 	umull	r2, r3, r3, r2
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	011c      	lsls	r4, r3, #4
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003064:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	1891      	adds	r1, r2, r2
 8003072:	64b9      	str	r1, [r7, #72]	; 0x48
 8003074:	415b      	adcs	r3, r3
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800307c:	4641      	mov	r1, r8
 800307e:	eb12 0a01 	adds.w	sl, r2, r1
 8003082:	4649      	mov	r1, r9
 8003084:	eb43 0b01 	adc.w	fp, r3, r1
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800309c:	4692      	mov	sl, r2
 800309e:	469b      	mov	fp, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	eb1a 0303 	adds.w	r3, sl, r3
 80030a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030aa:	464b      	mov	r3, r9
 80030ac:	eb4b 0303 	adc.w	r3, fp, r3
 80030b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
 80030d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030de:	f7fd f877 	bl	80001d0 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <UART_SetConfig+0x2d4>)
 80030ea:	fba3 2301 	umull	r2, r3, r3, r1
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2264      	movs	r2, #100	; 0x64
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	1acb      	subs	r3, r1, r3
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <UART_SetConfig+0x2d4>)
 8003100:	fba3 2302 	umull	r2, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800310c:	441c      	add	r4, r3
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800311c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003120:	4642      	mov	r2, r8
 8003122:	464b      	mov	r3, r9
 8003124:	1891      	adds	r1, r2, r2
 8003126:	63b9      	str	r1, [r7, #56]	; 0x38
 8003128:	415b      	adcs	r3, r3
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003130:	4641      	mov	r1, r8
 8003132:	1851      	adds	r1, r2, r1
 8003134:	6339      	str	r1, [r7, #48]	; 0x30
 8003136:	4649      	mov	r1, r9
 8003138:	414b      	adcs	r3, r1
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003148:	4659      	mov	r1, fp
 800314a:	00cb      	lsls	r3, r1, #3
 800314c:	4651      	mov	r1, sl
 800314e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003152:	4651      	mov	r1, sl
 8003154:	00ca      	lsls	r2, r1, #3
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	4603      	mov	r3, r0
 800315c:	4642      	mov	r2, r8
 800315e:	189b      	adds	r3, r3, r2
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003164:	464b      	mov	r3, r9
 8003166:	460a      	mov	r2, r1
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800317c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003184:	460b      	mov	r3, r1
 8003186:	18db      	adds	r3, r3, r3
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
 800318a:	4613      	mov	r3, r2
 800318c:	eb42 0303 	adc.w	r3, r2, r3
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800319a:	f7fd f819 	bl	80001d0 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <UART_SetConfig+0x2d4>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	; 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <UART_SetConfig+0x2d4>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 0207 	and.w	r2, r3, #7
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4422      	add	r2, r4
 80031ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031cc:	e105      	b.n	80033da <UART_SetConfig+0x4d6>
 80031ce:	bf00      	nop
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	1891      	adds	r1, r2, r2
 80031f4:	6239      	str	r1, [r7, #32]
 80031f6:	415b      	adcs	r3, r3
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031fe:	4641      	mov	r1, r8
 8003200:	1854      	adds	r4, r2, r1
 8003202:	4649      	mov	r1, r9
 8003204:	eb43 0501 	adc.w	r5, r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	00eb      	lsls	r3, r5, #3
 8003212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003216:	00e2      	lsls	r2, r4, #3
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	4643      	mov	r3, r8
 800321e:	18e3      	adds	r3, r4, r3
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003224:	464b      	mov	r3, r9
 8003226:	eb45 0303 	adc.w	r3, r5, r3
 800322a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800323a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800324a:	4629      	mov	r1, r5
 800324c:	008b      	lsls	r3, r1, #2
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003254:	4621      	mov	r1, r4
 8003256:	008a      	lsls	r2, r1, #2
 8003258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800325c:	f7fc ffb8 	bl	80001d0 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <UART_SetConfig+0x4e4>)
 8003266:	fba3 2302 	umull	r2, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	011c      	lsls	r4, r3, #4
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003278:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800327c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	61b9      	str	r1, [r7, #24]
 8003288:	415b      	adcs	r3, r3
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003290:	4641      	mov	r1, r8
 8003292:	1851      	adds	r1, r2, r1
 8003294:	6139      	str	r1, [r7, #16]
 8003296:	4649      	mov	r1, r9
 8003298:	414b      	adcs	r3, r1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a8:	4659      	mov	r1, fp
 80032aa:	00cb      	lsls	r3, r1, #3
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b2:	4651      	mov	r1, sl
 80032b4:	00ca      	lsls	r2, r1, #3
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	4642      	mov	r2, r8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032c4:	464b      	mov	r3, r9
 80032c6:	460a      	mov	r2, r1
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032e8:	4649      	mov	r1, r9
 80032ea:	008b      	lsls	r3, r1, #2
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f2:	4641      	mov	r1, r8
 80032f4:	008a      	lsls	r2, r1, #2
 80032f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032fa:	f7fc ff69 	bl	80001d0 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <UART_SetConfig+0x4e4>)
 8003304:	fba3 1302 	umull	r1, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	2164      	movs	r1, #100	; 0x64
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	3332      	adds	r3, #50	; 0x32
 8003316:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <UART_SetConfig+0x4e4>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003322:	441c      	add	r4, r3
 8003324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003328:	2200      	movs	r2, #0
 800332a:	673b      	str	r3, [r7, #112]	; 0x70
 800332c:	677a      	str	r2, [r7, #116]	; 0x74
 800332e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003332:	4642      	mov	r2, r8
 8003334:	464b      	mov	r3, r9
 8003336:	1891      	adds	r1, r2, r2
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	415b      	adcs	r3, r3
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003342:	4641      	mov	r1, r8
 8003344:	1851      	adds	r1, r2, r1
 8003346:	6039      	str	r1, [r7, #0]
 8003348:	4649      	mov	r1, r9
 800334a:	414b      	adcs	r3, r1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800335a:	4659      	mov	r1, fp
 800335c:	00cb      	lsls	r3, r1, #3
 800335e:	4651      	mov	r1, sl
 8003360:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003364:	4651      	mov	r1, sl
 8003366:	00ca      	lsls	r2, r1, #3
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	4603      	mov	r3, r0
 800336e:	4642      	mov	r2, r8
 8003370:	189b      	adds	r3, r3, r2
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
 8003374:	464b      	mov	r3, r9
 8003376:	460a      	mov	r2, r1
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	663b      	str	r3, [r7, #96]	; 0x60
 8003388:	667a      	str	r2, [r7, #100]	; 0x64
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003396:	4649      	mov	r1, r9
 8003398:	008b      	lsls	r3, r1, #2
 800339a:	4641      	mov	r1, r8
 800339c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a0:	4641      	mov	r1, r8
 80033a2:	008a      	lsls	r2, r1, #2
 80033a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033a8:	f7fc ff12 	bl	80001d0 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <UART_SetConfig+0x4e4>)
 80033b2:	fba3 1302 	umull	r1, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2164      	movs	r1, #100	; 0x64
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <UART_SetConfig+0x4e4>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4422      	add	r2, r4
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	51eb851f 	.word	0x51eb851f

080033ec <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80033fe:	4619      	mov	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800340c:	3301      	adds	r3, #1
 800340e:	425a      	negs	r2, r3
 8003410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003418:	bf58      	it	pl
 800341a:	4253      	negpl	r3, r2
 800341c:	b2da      	uxtb	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800342a:	2b80      	cmp	r3, #128	; 0x80
 800342c:	d113      	bne.n	8003456 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800343c:	3301      	adds	r3, #1
 800343e:	425a      	negs	r2, r3
 8003440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003448:	bf58      	it	pl
 800344a:	4253      	negpl	r3, r2
 800344c:	b2da      	uxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8003454:	e00b      	b.n	800346e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003464:	3301      	adds	r3, #1
 8003466:	b2da      	uxtb	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800348a:	461a      	mov	r2, r3
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f805 	bl	800349e <RingGetNBytes>
 8003494:	4603      	mov	r3, r0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <RingGetNBytes+0x1e>
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <RingGetNBytes+0x22>
 80034bc:	2300      	movs	r3, #0
 80034be:	e03e      	b.n	800353e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d901      	bls.n	80034ca <RingGetNBytes+0x2c>
 80034c6:	2300      	movs	r3, #0
 80034c8:	e039      	b.n	800353e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]
 80034ce:	e01b      	b.n	8003508 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034d6:	4619      	mov	r1, r3
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4413      	add	r3, r2
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	5c52      	ldrb	r2, [r2, r1]
 80034e2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034ea:	3301      	adds	r3, #1
 80034ec:	425a      	negs	r2, r3
 80034ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f6:	bf58      	it	pl
 80034f8:	4253      	negpl	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	3301      	adds	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
 8003508:	7dfa      	ldrb	r2, [r7, #23]
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	429a      	cmp	r2, r3
 800350e:	d205      	bcs.n	800351c <RingGetNBytes+0x7e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003516:	7dfa      	ldrb	r2, [r7, #23]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3d9      	bcc.n	80034d0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f805 	bl	8003546 <RingClear>

	return uCounter;
 800353c:	7dfb      	ldrb	r3, [r7, #23]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af02      	add	r7, sp, #8
 8003582:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <ModbusInit+0x114>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d87d      	bhi.n	8003688 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	33bc      	adds	r3, #188	; 0xbc
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ffd8 	bl	8003546 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d109      	bne.n	80035b2 <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800359e:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <ModbusInit+0x118>)
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	483d      	ldr	r0, [pc, #244]	; (8003698 <ModbusInit+0x11c>)
 80035a4:	f001 fbea 	bl	8004d7c <osThreadNew>
 80035a8:	4602      	mov	r2, r0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80035b0:	e033      	b.n	800361a <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d12e      	bne.n	8003618 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 80035ba:	4a38      	ldr	r2, [pc, #224]	; (800369c <ModbusInit+0x120>)
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4838      	ldr	r0, [pc, #224]	; (80036a0 <ModbusInit+0x124>)
 80035c0:	f001 fbdc 	bl	8004d7c <osThreadNew>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80035d2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80035da:	4a32      	ldr	r2, [pc, #200]	; (80036a4 <ModbusInit+0x128>)
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	4831      	ldr	r0, [pc, #196]	; (80036a8 <ModbusInit+0x12c>)
 80035e2:	f003 ff91 	bl	8007508 <xTimerCreate>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d100      	bne.n	80035fa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 80035f8:	e7fe      	b.n	80035f8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80035fa:	4a2c      	ldr	r2, [pc, #176]	; (80036ac <ModbusInit+0x130>)
 80035fc:	2110      	movs	r1, #16
 80035fe:	2002      	movs	r0, #2
 8003600:	f001 fcf2 	bl	8004fe8 <osMessageQueueNew>
 8003604:	4602      	mov	r2, r0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8003616:	e7fe      	b.n	8003616 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8003618:	e7fe      	b.n	8003618 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003620:	2b00      	cmp	r3, #0
 8003622:	d100      	bne.n	8003626 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8003624:	e7fe      	b.n	8003624 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800362c:	4a20      	ldr	r2, [pc, #128]	; (80036b0 <ModbusInit+0x134>)
 800362e:	9200      	str	r2, [sp, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2105      	movs	r1, #5
 8003634:	481f      	ldr	r0, [pc, #124]	; (80036b4 <ModbusInit+0x138>)
 8003636:	f003 ff67 	bl	8007508 <xTimerCreate>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d100      	bne.n	800364e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800364c:	e7fe      	b.n	800364c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <ModbusInit+0x13c>)
 8003650:	2101      	movs	r1, #1
 8003652:	2001      	movs	r0, #1
 8003654:	f001 fc3f 	bl	8004ed6 <osSemaphoreNew>
 8003658:	4602      	mov	r2, r0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800366a:	e7fe      	b.n	800366a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <ModbusInit+0x114>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <ModbusInit+0x140>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <ModbusInit+0x114>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b03      	ldr	r3, [pc, #12]	; (8003690 <ModbusInit+0x114>)
 8003684:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8003686:	e000      	b.n	800368a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8003688:	e7fe      	b.n	8003688 <ModbusInit+0x10c>
}
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200009dc 	.word	0x200009dc
 8003694:	080085a0 	.word	0x080085a0
 8003698:	080038a9 	.word	0x080038a9
 800369c:	080085c4 	.word	0x080085c4
 80036a0:	08003d1d 	.word	0x08003d1d
 80036a4:	0800384d 	.word	0x0800384d
 80036a8:	08008518 	.word	0x08008518
 80036ac:	08008588 	.word	0x08008588
 80036b0:	080037c9 	.word	0x080037c9
 80036b4:	08008528 	.word	0x08008528
 80036b8:	080085e8 	.word	0x080085e8
 80036bc:	200009d4 	.word	0x200009d4

080036c0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d00f      	beq.n	80036f2 <ModbusStart+0x32>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d00a      	beq.n	80036f2 <ModbusStart+0x32>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d005      	beq.n	80036f2 <ModbusStart+0x32>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d000      	beq.n	80036f2 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 80036f0:	e7fe      	b.n	80036f0 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d100      	bne.n	80036fe <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 80036fc:	e7fe      	b.n	80036fc <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003704:	2b01      	cmp	r3, #1
 8003706:	d004      	beq.n	8003712 <ModbusStart+0x52>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800370e:	2b04      	cmp	r3, #4
 8003710:	d13c      	bne.n	800378c <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68d8      	ldr	r0, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8a1b      	ldrh	r3, [r3, #16]
 8003722:	2200      	movs	r2, #0
 8003724:	4619      	mov	r1, r3
 8003726:	f7fd fdc3 	bl	80012b0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d105      	bne.n	800373e <ModbusStart+0x7e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003738:	2b00      	cmp	r3, #0
 800373a:	d100      	bne.n	800373e <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800373c:	e7fe      	b.n	800373c <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800373e:	bf00      	nop
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff f9cf 	bl	8002ae8 <HAL_UART_GetState>
 800374a:	4603      	mov	r3, r0
 800374c:	2b20      	cmp	r3, #32
 800374e:	d1f7      	bne.n	8003740 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6858      	ldr	r0, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	33a6      	adds	r3, #166	; 0xa6
 8003758:	2201      	movs	r2, #1
 800375a:	4619      	mov	r1, r3
 800375c:	f7fe fdcc 	bl	80022f8 <HAL_UART_Receive_IT>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d000      	beq.n	8003768 <ModbusStart+0xa8>
          {
                while(1)
 8003766:	e7fe      	b.n	8003766 <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7a1b      	ldrb	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <ModbusStart+0xba>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d100      	bne.n	800377a <ModbusStart+0xba>
          {
        	  while(1)
 8003778:	e7fe      	b.n	8003778 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7a1b      	ldrb	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <ModbusStart+0xcc>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d100      	bne.n	800378c <ModbusStart+0xcc>
          {
             	  while(1)
 800378a:	e7fe      	b.n	800378a <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e02a      	b.n	800382c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80037d6:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <vTimerCallbackT35+0x7c>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d11e      	bne.n	8003826 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <vTimerCallbackT35+0x7c>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d10c      	bne.n	8003810 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <vTimerCallbackT35+0x7c>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fe:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	2200      	movs	r2, #0
 800380a:	2103      	movs	r1, #3
 800380c:	f003 fed8 	bl	80075c0 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <vTimerCallbackT35+0x7c>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800381c:	2300      	movs	r3, #0
 800381e:	2203      	movs	r2, #3
 8003820:	2100      	movs	r1, #0
 8003822:	f003 fc41 	bl	80070a8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <vTimerCallbackT35+0x80>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4293      	cmp	r3, r2
 8003836:	dbce      	blt.n	80037d6 <vTimerCallbackT35+0xe>
		}

	}
}
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200009d4 	.word	0x200009d4
 8003848:	200009dc 	.word	0x200009dc

0800384c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e017      	b.n	800388a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <vTimerCallbackTimeout+0x54>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d10b      	bne.n	8003884 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800386c:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <vTimerCallbackTimeout+0x54>)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8003878:	2300      	movs	r3, #0
 800387a:	2203      	movs	r2, #3
 800387c:	f06f 0107 	mvn.w	r1, #7
 8003880:	f003 fc12 	bl	80070a8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <vTimerCallbackTimeout+0x58>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4293      	cmp	r3, r2
 8003894:	dbe1      	blt.n	800385a <vTimerCallbackTimeout+0xe>
		}

	}

}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200009d4 	.word	0x200009d4
 80038a4:	200009dc 	.word	0x200009dc

080038a8 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d004      	beq.n	80038ce <StartTaskModbusSlave+0x26>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d117      	bne.n	80038fe <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80038ce:	f04f 31ff 	mov.w	r1, #4294967295
 80038d2:	2001      	movs	r0, #1
 80038d4:	f003 fba0 	bl	8007018 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fbed 	bl	80040b8 <getRxBuffer>
 80038de:	4603      	mov	r3, r0
 80038e0:	f113 0f03 	cmn.w	r3, #3
 80038e4:	d10b      	bne.n	80038fe <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	22fd      	movs	r2, #253	; 0xfd
 80038ea:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80038f2:	3301      	adds	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 80038fc:	e0a1      	b.n	8003a42 <StartTaskModbusSlave+0x19a>
	  }

   }

   if (modH->u8BufferSize < 7)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003904:	2b06      	cmp	r3, #6
 8003906:	d80b      	bhi.n	8003920 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	22fa      	movs	r2, #250	; 0xfa
 800390c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003914:	3301      	adds	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800391e:	e090      	b.n	8003a42 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	7cda      	ldrb	r2, [r3, #19]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	7a1b      	ldrb	r3, [r3, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	f040 8089 	bne.w	8003a40 <StartTaskModbusSlave+0x198>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fc0c 	bl	800414c <validateRequest>
 8003934:	4603      	mov	r3, r0
 8003936:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8003938:	7afb      	ldrb	r3, [r7, #11]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fda6 	bl	8004494 <buildException>
			sendTxBuffer(modH);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fdc2 	bl	80044d2 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800394e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8003956:	e074      	b.n	8003a42 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	4618      	mov	r0, r3
 800396a:	f002 f8bb 	bl	8005ae4 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	7d1b      	ldrb	r3, [r3, #20]
 8003972:	3b01      	subs	r3, #1
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d859      	bhi.n	8003a2c <StartTaskModbusSlave+0x184>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <StartTaskModbusSlave+0xd8>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039c1 	.word	0x080039c1
 8003984:	080039c1 	.word	0x080039c1
 8003988:	080039d3 	.word	0x080039d3
 800398c:	080039d3 	.word	0x080039d3
 8003990:	080039e5 	.word	0x080039e5
 8003994:	080039f7 	.word	0x080039f7
 8003998:	08003a2d 	.word	0x08003a2d
 800399c:	08003a2d 	.word	0x08003a2d
 80039a0:	08003a2d 	.word	0x08003a2d
 80039a4:	08003a2d 	.word	0x08003a2d
 80039a8:	08003a2d 	.word	0x08003a2d
 80039ac:	08003a2d 	.word	0x08003a2d
 80039b0:	08003a2d 	.word	0x08003a2d
 80039b4:	08003a2d 	.word	0x08003a2d
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	08003a1b 	.word	0x08003a1b
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fe16 	bl	80045f2 <process_FC1>
 80039c6:	4603      	mov	r3, r0
 80039c8:	461a      	mov	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80039d0:	e02d      	b.n	8003a2e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fec2 	bl	800475c <process_FC3>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80039e2:	e024      	b.n	8003a2e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 ff24 	bl	8004832 <process_FC5>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80039f4:	e01b      	b.n	8003a2e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 ff74 	bl	80048e4 <process_FC6>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8003a06:	e012      	b.n	8003a2e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 ff9d 	bl	8004948 <process_FC15>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8003a18:	e009      	b.n	8003a2e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f001 f822 	bl	8004a64 <process_FC16>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8003a2a:	e000      	b.n	8003a2e <StartTaskModbusSlave+0x186>
			default:
				break;
 8003a2c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003a34:	2300      	movs	r3, #0
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f001 fdd9 	bl	80055f0 <xQueueGenericSend>

	 continue;
 8003a3e:	e000      	b.n	8003a42 <StartTaskModbusSlave+0x19a>
    	continue; // continue this is not for us
 8003a40:	bf00      	nop
  {
 8003a42:	e737      	b.n	80038b4 <StartTaskModbusSlave+0xc>

08003a44 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8003a44:	b084      	sub	sp, #16
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	f107 001c 	add.w	r0, r7, #28
 8003a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	4618      	mov	r0, r3
 8003a66:	f002 f83d 	bl	8005ae4 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7a1b      	ldrb	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <SendQuery+0x32>
 8003a72:	23ff      	movs	r3, #255	; 0xff
 8003a74:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <SendQuery+0x40>
 8003a80:	23fe      	movs	r3, #254	; 0xfe
 8003a82:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8003a84:	7f3b      	ldrb	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <SendQuery+0x4c>
 8003a8a:	7f3b      	ldrb	r3, [r7, #28]
 8003a8c:	2bf7      	cmp	r3, #247	; 0xf7
 8003a8e:	d901      	bls.n	8003a94 <SendQuery+0x50>
 8003a90:	23f7      	movs	r3, #247	; 0xf7
 8003a92:	73bb      	strb	r3, [r7, #14]


	if(error)
 8003a94:	7bbb      	ldrb	r3, [r7, #14]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8003a9a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	f001 fd9f 	bl	80055f0 <xQueueGenericSend>
		 return error;
 8003ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ab6:	e129      	b.n	8003d0c <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8003ac0:	7f3a      	ldrb	r2, [r7, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8003ac6:	7f7a      	ldrb	r2, [r7, #29]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8003acc:	8bfb      	ldrh	r3, [r7, #30]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8003ad8:	8bfb      	ldrh	r3, [r7, #30]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8003ae0:	7f7b      	ldrb	r3, [r7, #29]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	f200 80fe 	bhi.w	8003ce6 <SendQuery+0x2a2>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <SendQuery+0xac>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b31 	.word	0x08003b31
 8003af8:	08003b31 	.word	0x08003b31
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003b4f 	.word	0x08003b4f
 8003b04:	08003b71 	.word	0x08003b71
 8003b08:	08003ce7 	.word	0x08003ce7
 8003b0c:	08003ce7 	.word	0x08003ce7
 8003b10:	08003ce7 	.word	0x08003ce7
 8003b14:	08003ce7 	.word	0x08003ce7
 8003b18:	08003ce7 	.word	0x08003ce7
 8003b1c:	08003ce7 	.word	0x08003ce7
 8003b20:	08003ce7 	.word	0x08003ce7
 8003b24:	08003ce7 	.word	0x08003ce7
 8003b28:	08003b93 	.word	0x08003b93
 8003b2c:	08003c51 	.word	0x08003c51
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003b30:	8c3b      	ldrh	r3, [r7, #32]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003b3c:	8c3b      	ldrh	r3, [r7, #32]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2206      	movs	r2, #6
 8003b48:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8003b4c:	e0cb      	b.n	8003ce6 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <SendQuery+0x116>
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	e000      	b.n	8003b5c <SendQuery+0x118>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2206      	movs	r2, #6
 8003b6a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8003b6e:	e0ba      	b.n	8003ce6 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2206      	movs	r2, #6
 8003b8c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8003b90:	e0a9      	b.n	8003ce6 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8003b92:	8c3b      	ldrh	r3, [r7, #32]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8003b9a:	7a7b      	ldrb	r3, [r7, #9]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8003ba0:	8c3b      	ldrh	r3, [r7, #32]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8003bb2:	7a7b      	ldrb	r3, [r7, #9]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003bb8:	8c3b      	ldrh	r3, [r7, #32]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003bc4:	8c3b      	ldrh	r3, [r7, #32]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	81bb      	strh	r3, [r7, #12]
 8003bde:	e031      	b.n	8003c44 <SendQuery+0x200>
	    {
	        if(i%2)
 8003be0:	89bb      	ldrh	r3, [r7, #12]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00f      	beq.n	8003c0c <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	89bb      	ldrh	r3, [r7, #12]
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c00:	4619      	mov	r1, r3
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	440b      	add	r3, r1
 8003c08:	74da      	strb	r2, [r3, #19]
 8003c0a:	e010      	b.n	8003c2e <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	89bb      	ldrh	r3, [r7, #12]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c24:	4619      	mov	r1, r3
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	440b      	add	r3, r1
 8003c2c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c34:	3301      	adds	r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8003c3e:	89bb      	ldrh	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	81bb      	strh	r3, [r7, #12]
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	89ba      	ldrh	r2, [r7, #12]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3c8      	bcc.n	8003be0 <SendQuery+0x19c>
	    }
	    break;
 8003c4e:	e04a      	b.n	8003ce6 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8003c50:	8c3b      	ldrh	r3, [r7, #32]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8003c5c:	8c3b      	ldrh	r3, [r7, #32]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8003c64:	8c3b      	ldrh	r3, [r7, #32]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2207      	movs	r2, #7
 8003c74:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	817b      	strh	r3, [r7, #10]
 8003c7c:	e02e      	b.n	8003cdc <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c92:	4619      	mov	r1, r3
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	440b      	add	r3, r1
 8003c9a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881a      	ldrh	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	817b      	strh	r3, [r7, #10]
 8003cdc:	8c3b      	ldrh	r3, [r7, #32]
 8003cde:	897a      	ldrh	r2, [r7, #10]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3cc      	bcc.n	8003c7e <SendQuery+0x23a>
	    }
	    break;
 8003ce4:	bf00      	nop
	}


	sendTxBuffer(modH);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fbf3 	bl	80044d2 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f001 fc7a 	bl	80055f0 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	749a      	strb	r2, [r3, #18]
	return 0;
 8003d0a:	2300      	movs	r3, #0


}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d16:	b004      	add	sp, #16
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d2e:	f107 010c 	add.w	r1, r7, #12
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 fdf4 	bl	8005924 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d48:	f7ff fe7c 	bl	8003a44 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d50:	2001      	movs	r0, #1
 8003d52:	f003 f961 	bl	8007018 <ulTaskNotifyTake>
 8003d56:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d018      	beq.n	8003d96 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	22f8      	movs	r2, #248	; 0xf8
 8003d70:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003d78:	3301      	adds	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2203      	movs	r2, #3
 8003d90:	f003 f98a 	bl	80070a8 <xTaskGenericNotify>
    	  continue;
 8003d94:	e09a      	b.n	8003ecc <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8003d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d98:	f000 f98e 	bl	80040b8 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d818      	bhi.n	8003dd8 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	22fa      	movs	r2, #250	; 0xfa
 8003db2:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8003dba:	3301      	adds	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003dc4:	69b8      	ldr	r0, [r7, #24]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	f003 f969 	bl	80070a8 <xTaskGenericNotify>
		  continue;
 8003dd6:	e079      	b.n	8003ecc <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2200      	movs	r2, #0
 8003de6:	2103      	movs	r1, #3
 8003de8:	f003 fbea 	bl	80075c0 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8003dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dee:	f000 f8f5 	bl	8003fdc <validateAnswer>
 8003df2:	4603      	mov	r3, r0
 8003df4:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d010      	beq.n	8003e20 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	7ffa      	ldrb	r2, [r7, #31]
 8003e0a:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8003e0c:	69b8      	ldr	r0, [r7, #24]
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003e14:	4619      	mov	r1, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f003 f945 	bl	80070a8 <xTaskGenericNotify>
	     continue;
 8003e1e:	e055      	b.n	8003ecc <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	7ffa      	ldrb	r2, [r7, #31]
 8003e24:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fe57 	bl	8005ae4 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	7d1b      	ldrb	r3, [r3, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d82b      	bhi.n	8003e98 <StartTaskModbusMaster+0x17c>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <StartTaskModbusMaster+0x12c>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e89 	.word	0x08003e89
 8003e4c:	08003e89 	.word	0x08003e89
 8003e50:	08003e91 	.word	0x08003e91
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003e99 	.word	0x08003e99
 8003e5c:	08003e99 	.word	0x08003e99
 8003e60:	08003e99 	.word	0x08003e99
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003e99 	.word	0x08003e99
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003e99 	.word	0x08003e99
 8003e7c:	08003e99 	.word	0x08003e99
 8003e80:	08003e99 	.word	0x08003e99
 8003e84:	08003e99 	.word	0x08003e99
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8003e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8a:	f000 f821 	bl	8003ed0 <get_FC1>
	      break;
 8003e8e:	e004      	b.n	8003e9a <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8003e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e92:	f000 f874 	bl	8003f7e <get_FC3>
	      break;
 8003e96:	e000      	b.n	8003e9a <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8003e98:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10e      	bne.n	8003eca <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f001 fb9a 	bl	80055f0 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8003ebc:	69b8      	ldr	r0, [r7, #24]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f06f 010a 	mvn.w	r1, #10
 8003ec6:	f003 f8ef 	bl	80070a8 <xTaskGenericNotify>
	  }


	  continue;
 8003eca:	bf00      	nop
  {
 8003ecc:	e72c      	b.n	8003d28 <StartTaskModbusMaster+0xc>
 8003ece:	bf00      	nop

08003ed0 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	e043      	b.n	8003f6a <get_FC1+0x9a>

        if(i%2)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01c      	beq.n	8003f28 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	7bbb      	ldrb	r3, [r7, #14]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	7cd8      	ldrb	r0, [r3, #19]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b2d9      	uxtb	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	18d4      	adds	r4, r2, r3
 8003f1e:	f000 fa5f 	bl	80043e0 <word>
 8003f22:	4603      	mov	r3, r0
 8003f24:	8023      	strh	r3, [r4, #0]
 8003f26:	e01d      	b.n	8003f64 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	b2d8      	uxtb	r0, r3
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	7bbb      	ldrb	r3, [r7, #14]
 8003f44:	4413      	add	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	7cd9      	ldrb	r1, [r3, #19]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	18d4      	adds	r4, r2, r3
 8003f5c:	f000 fa40 	bl	80043e0 <word>
 8003f60:	4603      	mov	r3, r0
 8003f62:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	3301      	adds	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7d5b      	ldrb	r3, [r3, #21]
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3b6      	bcc.n	8003ee2 <get_FC1+0x12>
        }

     }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd90      	pop	{r4, r7, pc}

08003f7e <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73bb      	strb	r3, [r7, #14]
 8003f8e:	e018      	b.n	8003fc2 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	7cd8      	ldrb	r0, [r3, #19]
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	7cd9      	ldrb	r1, [r3, #19]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003fa8:	7bbb      	ldrb	r3, [r7, #14]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	18d4      	adds	r4, r2, r3
 8003fae:	f000 fa17 	bl	80043e0 <word>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	73bb      	strb	r3, [r7, #14]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7d5b      	ldrb	r3, [r3, #21]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	7bba      	ldrb	r2, [r7, #14]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3df      	bcc.n	8003f90 <get_FC3+0x12>
    }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}
	...

08003fdc <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003fea:	3b02      	subs	r3, #2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	7cdb      	ldrb	r3, [r3, #19]
 8003ff2:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8003ff4:	b21a      	sxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	440b      	add	r3, r1
 8004002:	7cdb      	ldrb	r3, [r3, #19]
 8004004:	b21b      	sxth	r3, r3
 8004006:	4313      	orrs	r3, r2
 8004008:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800400a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f103 0213 	add.w	r2, r3, #19
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004018:	3b02      	subs	r3, #2
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f000 f9f1 	bl	8004406 <calcCRC>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	89bb      	ldrh	r3, [r7, #12]
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004034:	3301      	adds	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800403e:	23fc      	movs	r3, #252	; 0xfc
 8004040:	e034      	b.n	80040ac <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	7d1b      	ldrb	r3, [r3, #20]
 8004046:	b25b      	sxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	da09      	bge.n	8004060 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004052:	3301      	adds	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800405c:	23fb      	movs	r3, #251	; 0xfb
 800405e:	e025      	b.n	80040ac <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8004064:	2300      	movs	r3, #0
 8004066:	73bb      	strb	r3, [r7, #14]
 8004068:	e00c      	b.n	8004084 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800406a:	7bbb      	ldrb	r3, [r7, #14]
 800406c:	4a11      	ldr	r2, [pc, #68]	; (80040b4 <validateAnswer+0xd8>)
 800406e:	5cd2      	ldrb	r2, [r2, r3]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7d1b      	ldrb	r3, [r3, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d102      	bne.n	800407e <validateAnswer+0xa2>
        {
            isSupported = 1;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
            break;
 800407c:	e005      	b.n	800408a <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	3301      	adds	r3, #1
 8004082:	73bb      	strb	r3, [r7, #14]
 8004084:	7bbb      	ldrb	r3, [r7, #14]
 8004086:	2b07      	cmp	r3, #7
 8004088:	d9ef      	bls.n	800406a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800409c:	3301      	adds	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	080085f8 	.word	0x080085f8

080040b8 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d104      	bne.n	80040d4 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe f942 	bl	8002358 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	33bc      	adds	r3, #188	; 0xbc
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fa2f 	bl	8003546 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 80040e8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80040ec:	81fb      	strh	r3, [r7, #14]
 80040ee:	e019      	b.n	8004124 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3313      	adds	r3, #19
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7ff f9bc 	bl	800347a <RingGetAllBytes>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004112:	3301      	adds	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004122:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6858      	ldr	r0, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	33a6      	adds	r3, #166	; 0xa6
 8004136:	2201      	movs	r2, #1
 8004138:	4619      	mov	r1, r3
 800413a:	f7fe f8dd 	bl	80022f8 <HAL_UART_Receive_IT>
	}

    return i16result;
 800413e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800415a:	3b02      	subs	r3, #2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	7cdb      	ldrb	r3, [r3, #19]
 8004162:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8004164:	b21a      	sxth	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800416c:	3b01      	subs	r3, #1
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	440b      	add	r3, r1
 8004172:	7cdb      	ldrb	r3, [r3, #19]
 8004174:	b21b      	sxth	r3, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800417a:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f103 0213 	add.w	r2, r3, #19
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004188:	3b02      	subs	r3, #2
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f000 f939 	bl	8004406 <calcCRC>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80041a4:	3301      	adds	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 80041ae:	23fc      	movs	r3, #252	; 0xfc
 80041b0:	e10f      	b.n	80043d2 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	73bb      	strb	r3, [r7, #14]
 80041ba:	e00c      	b.n	80041d6 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
 80041be:	4a87      	ldr	r2, [pc, #540]	; (80043dc <validateRequest+0x290>)
 80041c0:	5cd2      	ldrb	r2, [r2, r3]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7d1b      	ldrb	r3, [r3, #20]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d102      	bne.n	80041d0 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
	            break;
 80041ce:	e005      	b.n	80041dc <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
 80041d2:	3301      	adds	r3, #1
 80041d4:	73bb      	strb	r3, [r7, #14]
 80041d6:	7bbb      	ldrb	r3, [r7, #14]
 80041d8:	2b07      	cmp	r3, #7
 80041da:	d9ef      	bls.n	80041bc <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80041ee:	3301      	adds	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0ea      	b.n	80043d2 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7d1b      	ldrb	r3, [r3, #20]
 8004208:	3b01      	subs	r3, #1
 800420a:	2b0f      	cmp	r3, #15
 800420c:	f200 80e0 	bhi.w	80043d0 <validateRequest+0x284>
 8004210:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <validateRequest+0xcc>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004259 	.word	0x08004259
 800421c:	08004259 	.word	0x08004259
 8004220:	08004371 	.word	0x08004371
 8004224:	08004371 	.word	0x08004371
 8004228:	08004305 	.word	0x08004305
 800422c:	0800434d 	.word	0x0800434d
 8004230:	080043d1 	.word	0x080043d1
 8004234:	080043d1 	.word	0x080043d1
 8004238:	080043d1 	.word	0x080043d1
 800423c:	080043d1 	.word	0x080043d1
 8004240:	080043d1 	.word	0x080043d1
 8004244:	080043d1 	.word	0x080043d1
 8004248:	080043d1 	.word	0x080043d1
 800424c:	080043d1 	.word	0x080043d1
 8004250:	08004259 	.word	0x08004259
 8004254:	08004371 	.word	0x08004371
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7d5a      	ldrb	r2, [r3, #21]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7d9b      	ldrb	r3, [r3, #22]
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f000 f8bc 	bl	80043e0 <word>
 8004268:	4603      	mov	r3, r0
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7dda      	ldrb	r2, [r3, #23]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7e1b      	ldrb	r3, [r3, #24]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 f8b1 	bl	80043e0 <word>
 800427e:	4603      	mov	r3, r0
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7dda      	ldrb	r2, [r3, #23]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7e1b      	ldrb	r3, [r3, #24]
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 f8a6 	bl	80043e0 <word>
 8004294:	4603      	mov	r3, r0
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <validateRequest+0x15a>
 80042a0:	897b      	ldrh	r3, [r7, #10]
 80042a2:	3301      	adds	r3, #1
 80042a4:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 80042a6:	89ba      	ldrh	r2, [r7, #12]
 80042a8:	897b      	ldrh	r3, [r7, #10]
 80042aa:	4413      	add	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80042b2:	4293      	cmp	r3, r2
 80042b4:	dd01      	ble.n	80042ba <validateRequest+0x16e>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e08b      	b.n	80043d2 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7dda      	ldrb	r2, [r3, #23]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7e1b      	ldrb	r3, [r3, #24]
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f000 f88b 	bl	80043e0 <word>
 80042ca:	4603      	mov	r3, r0
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7dda      	ldrb	r2, [r3, #23]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7e1b      	ldrb	r3, [r3, #24]
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f000 f880 	bl	80043e0 <word>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <validateRequest+0x1a6>
 80042ec:	897b      	ldrh	r3, [r7, #10]
 80042ee:	3301      	adds	r3, #1
 80042f0:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	3305      	adds	r3, #5
 80042f6:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 80042f8:	897b      	ldrh	r3, [r7, #10]
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d960      	bls.n	80043c2 <validateRequest+0x276>
 8004300:	2303      	movs	r3, #3
 8004302:	e066      	b.n	80043d2 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7d5a      	ldrb	r2, [r3, #21]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7d9b      	ldrb	r3, [r3, #22]
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 f866 	bl	80043e0 <word>
 8004314:	4603      	mov	r3, r0
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7d5a      	ldrb	r2, [r3, #21]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7d9b      	ldrb	r3, [r3, #22]
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f000 f85b 	bl	80043e0 <word>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <validateRequest+0x1f0>
 8004336:	89bb      	ldrh	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004342:	89ba      	ldrh	r2, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d93e      	bls.n	80043c6 <validateRequest+0x27a>
 8004348:	2302      	movs	r3, #2
 800434a:	e042      	b.n	80043d2 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7d5a      	ldrb	r2, [r3, #21]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7d9b      	ldrb	r3, [r3, #22]
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 f842 	bl	80043e0 <word>
 800435c:	4603      	mov	r3, r0
 800435e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004366:	89ba      	ldrh	r2, [r7, #12]
 8004368:	429a      	cmp	r2, r3
 800436a:	d92e      	bls.n	80043ca <validateRequest+0x27e>
 800436c:	2302      	movs	r3, #2
 800436e:	e030      	b.n	80043d2 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7d5a      	ldrb	r2, [r3, #21]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7d9b      	ldrb	r3, [r3, #22]
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 f830 	bl	80043e0 <word>
 8004380:	4603      	mov	r3, r0
 8004382:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7dda      	ldrb	r2, [r3, #23]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7e1b      	ldrb	r3, [r3, #24]
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f000 f826 	bl	80043e0 <word>
 8004394:	4603      	mov	r3, r0
 8004396:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8004398:	89ba      	ldrh	r2, [r7, #12]
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	4413      	add	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80043a4:	4293      	cmp	r3, r2
 80043a6:	dd01      	ble.n	80043ac <validateRequest+0x260>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e012      	b.n	80043d2 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3305      	adds	r3, #5
 80043b4:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 80043b6:	897b      	ldrh	r3, [r7, #10]
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043bc:	d907      	bls.n	80043ce <validateRequest+0x282>
 80043be:	2303      	movs	r3, #3
 80043c0:	e007      	b.n	80043d2 <validateRequest+0x286>
	        break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <validateRequest+0x284>
	        break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <validateRequest+0x284>
	        break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <validateRequest+0x284>
	        break;
 80043ce:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80043d0:	2300      	movs	r3, #0

}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	080085f8 	.word	0x080085f8

080043e0 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	460a      	mov	r2, r1
 80043ea:	71fb      	strb	r3, [r7, #7]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 80043f0:	79bb      	ldrb	r3, [r7, #6]
 80043f2:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 80043f8:	89bb      	ldrh	r3, [r7, #12]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8004406:	b480      	push	{r7}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8004412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004416:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8004418:	2300      	movs	r3, #0
 800441a:	74fb      	strb	r3, [r7, #19]
 800441c:	e023      	b.n	8004466 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4053      	eors	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800442e:	2301      	movs	r3, #1
 8004430:	74bb      	strb	r3, [r7, #18]
 8004432:	e012      	b.n	800445a <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	617b      	str	r3, [r7, #20]
            if (flag)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <calcCRC+0x4e>
                temp ^= 0xA001;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800444e:	f083 0301 	eor.w	r3, r3, #1
 8004452:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8004454:	7cbb      	ldrb	r3, [r7, #18]
 8004456:	3301      	adds	r3, #1
 8004458:	74bb      	strb	r3, [r7, #18]
 800445a:	7cbb      	ldrb	r3, [r7, #18]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d9e9      	bls.n	8004434 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	3301      	adds	r3, #1
 8004464:	74fb      	strb	r3, [r7, #19]
 8004466:	7cfa      	ldrb	r2, [r7, #19]
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	429a      	cmp	r2, r3
 800446c:	d3d7      	bcc.n	800441e <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	b29b      	uxth	r3, r3
 8004482:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	b29b      	uxth	r3, r3

}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	7d1b      	ldrb	r3, [r3, #20]
 80044a4:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	7a1a      	ldrb	r2, [r3, #8]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	3b80      	subs	r3, #128	; 0x80
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	79fa      	ldrb	r2, [r7, #7]
 80044bc:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 80044d2:	b590      	push	{r4, r7, lr}
 80044d4:	b087      	sub	sp, #28
 80044d6:	af02      	add	r7, sp, #8
 80044d8:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f103 0213 	add.w	r2, r3, #19
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7ff ff8c 	bl	8004406 <calcCRC>
 80044ee:	4603      	mov	r3, r0
 80044f0:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80044f2:	89fb      	ldrh	r3, [r7, #14]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80044fe:	4619      	mov	r1, r3
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	440b      	add	r3, r1
 8004506:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800450e:	3301      	adds	r3, #1
 8004510:	b2da      	uxtb	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800451e:	4619      	mov	r1, r3
 8004520:	89fb      	ldrh	r3, [r7, #14]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	440b      	add	r3, r1
 8004528:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004530:	3301      	adds	r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fa66 	bl	8002a18 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68d8      	ldr	r0, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8a1b      	ldrh	r3, [r3, #16]
 8004554:	2201      	movs	r2, #1
 8004556:	4619      	mov	r1, r3
 8004558:	f7fc feaa 	bl	80012b0 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6858      	ldr	r0, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 0113 	add.w	r1, r3, #19
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800456c:	b29b      	uxth	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	f7fd fe7d 	bl	800226e <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8004574:	21fa      	movs	r1, #250	; 0xfa
 8004576:	2001      	movs	r0, #1
 8004578:	f002 fd4e 	bl	8007018 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 800457c:	bf00      	nop
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f7      	beq.n	800457e <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68d8      	ldr	r0, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8a1b      	ldrh	r3, [r3, #16]
 800459e:	2200      	movs	r2, #0
 80045a0:	4619      	mov	r1, r3
 80045a2:	f7fc fe85 	bl	80012b0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fa68 	bl	8002a80 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d10c      	bne.n	80045d2 <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80045be:	f002 f859 	bl	8006674 <xTaskGetTickCount>
 80045c2:	4602      	mov	r2, r0
 80045c4:	2300      	movs	r3, #0
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	2102      	movs	r1, #2
 80045cc:	4620      	mov	r0, r4
 80045ce:	f002 fff7 	bl	80075c0 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80045e0:	3301      	adds	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}

080045f2 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7d5a      	ldrb	r2, [r3, #21]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7d9b      	ldrb	r3, [r3, #22]
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7ff feeb 	bl	80043e0 <word>
 800460a:	4603      	mov	r3, r0
 800460c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7dda      	ldrb	r2, [r3, #23]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	7e1b      	ldrb	r3, [r3, #24]
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7ff fee1 	bl	80043e0 <word>
 800461e:	4603      	mov	r3, r0
 8004620:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8004622:	8a3b      	ldrh	r3, [r7, #16]
 8004624:	08db      	lsrs	r3, r3, #3
 8004626:	b29b      	uxth	r3, r3
 8004628:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800462a:	8a3b      	ldrh	r3, [r7, #16]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <process_FC1+0x4a>
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	3301      	adds	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7dfa      	ldrb	r2, [r7, #23]
 8004640:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2203      	movs	r2, #3
 8004646:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004650:	461a      	mov	r2, r3
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	4413      	add	r3, r2
 8004656:	3b01      	subs	r3, #1
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	2200      	movs	r2, #0
 800465e:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004664:	2300      	movs	r3, #0
 8004666:	82bb      	strh	r3, [r7, #20]
 8004668:	e058      	b.n	800471c <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800466a:	8a7a      	ldrh	r2, [r7, #18]
 800466c:	8abb      	ldrh	r3, [r7, #20]
 800466e:	4413      	add	r3, r2
 8004670:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8004672:	89bb      	ldrh	r3, [r7, #12]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8004678:	89bb      	ldrh	r3, [r7, #12]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004688:	897b      	ldrh	r3, [r7, #10]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	7a7b      	ldrb	r3, [r7, #9]
 8004694:	fa42 f303 	asr.w	r3, r2, r3
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d014      	beq.n	80046ca <process_FC1+0xd8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	7cda      	ldrb	r2, [r3, #19]
 80046ae:	7dbb      	ldrb	r3, [r7, #22]
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80046be:	4313      	orrs	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	440b      	add	r3, r1
 80046c6:	74da      	strb	r2, [r3, #19]
 80046c8:	e015      	b.n	80046f6 <process_FC1+0x104>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	7cda      	ldrb	r2, [r3, #19]
 80046d8:	7dbb      	ldrb	r3, [r7, #22]
 80046da:	2101      	movs	r1, #1
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80046ec:	4013      	ands	r3, r2
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	440b      	add	r3, r1
 80046f4:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 80046f6:	7dbb      	ldrb	r3, [r7, #22]
 80046f8:	3301      	adds	r3, #1
 80046fa:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80046fc:	7dbb      	ldrb	r3, [r7, #22]
 80046fe:	2b07      	cmp	r3, #7
 8004700:	d909      	bls.n	8004716 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800470c:	3301      	adds	r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004716:	8abb      	ldrh	r3, [r7, #20]
 8004718:	3301      	adds	r3, #1
 800471a:	82bb      	strh	r3, [r7, #20]
 800471c:	8aba      	ldrh	r2, [r7, #20]
 800471e:	8a3b      	ldrh	r3, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d3a2      	bcc.n	800466a <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8004724:	8a3b      	ldrh	r3, [r7, #16]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <process_FC1+0x14e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004736:	3301      	adds	r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004746:	3302      	adds	r3, #2
 8004748:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fec1 	bl	80044d2 <sendTxBuffer>
    return u8CopyBufferSize;
 8004750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7d5a      	ldrb	r2, [r3, #21]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	7d9b      	ldrb	r3, [r3, #22]
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7ff fe36 	bl	80043e0 <word>
 8004774:	4603      	mov	r3, r0
 8004776:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7dda      	ldrb	r2, [r3, #23]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7e1b      	ldrb	r3, [r3, #24]
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7ff fe2c 	bl	80043e0 <word>
 8004788:	4603      	mov	r3, r0
 800478a:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800478c:	7afb      	ldrb	r3, [r7, #11]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2203      	movs	r2, #3
 800479a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800479e:	89bb      	ldrh	r3, [r7, #12]
 80047a0:	81fb      	strh	r3, [r7, #14]
 80047a2:	e032      	b.n	800480a <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80047bc:	4619      	mov	r1, r3
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	440b      	add	r3, r1
 80047c4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80047cc:	3301      	adds	r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80047ea:	4619      	mov	r1, r3
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	440b      	add	r3, r1
 80047f2:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80047fa:	3301      	adds	r3, #1
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8004804:	89fb      	ldrh	r3, [r7, #14]
 8004806:	3301      	adds	r3, #1
 8004808:	81fb      	strh	r3, [r7, #14]
 800480a:	89fa      	ldrh	r2, [r7, #14]
 800480c:	89b9      	ldrh	r1, [r7, #12]
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	440b      	add	r3, r1
 8004812:	429a      	cmp	r2, r3
 8004814:	dbc6      	blt.n	80047a4 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800481c:	3302      	adds	r3, #2
 800481e:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fe56 	bl	80044d2 <sendTxBuffer>

    return u8CopyBufferSize;
 8004826:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7d5a      	ldrb	r2, [r3, #21]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7d9b      	ldrb	r3, [r3, #22]
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7ff fdcb 	bl	80043e0 <word>
 800484a:	4603      	mov	r3, r0
 800484c:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800484e:	89fb      	ldrh	r3, [r7, #14]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8004854:	89fb      	ldrh	r3, [r7, #14]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7ddb      	ldrb	r3, [r3, #23]
 8004862:	2bff      	cmp	r3, #255	; 0xff
 8004864:	d115      	bne.n	8004892 <process_FC5+0x60>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800486c:	89bb      	ldrh	r3, [r7, #12]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	8819      	ldrh	r1, [r3, #0]
 8004874:	7afb      	ldrb	r3, [r7, #11]
 8004876:	2201      	movs	r2, #1
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8004884:	89bb      	ldrh	r3, [r7, #12]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4403      	add	r3, r0
 800488a:	430a      	orrs	r2, r1
 800488c:	b292      	uxth	r2, r2
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	e016      	b.n	80048c0 <process_FC5+0x8e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004898:	89bb      	ldrh	r3, [r7, #12]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	8819      	ldrh	r1, [r3, #0]
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	2201      	movs	r2, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80048b4:	89bb      	ldrh	r3, [r7, #12]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4403      	add	r3, r0
 80048ba:	400a      	ands	r2, r1
 80048bc:	b292      	uxth	r2, r2
 80048be:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2206      	movs	r2, #6
 80048c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80048ce:	3302      	adds	r3, #2
 80048d0:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fdfd 	bl	80044d2 <sendTxBuffer>

    return u8CopyBufferSize;
 80048d8:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7d5a      	ldrb	r2, [r3, #21]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7d9b      	ldrb	r3, [r3, #22]
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7ff fd72 	bl	80043e0 <word>
 80048fc:	4603      	mov	r3, r0
 80048fe:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7dda      	ldrb	r2, [r3, #23]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	7e1b      	ldrb	r3, [r3, #24]
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f7ff fd68 	bl	80043e0 <word>
 8004910:	4603      	mov	r3, r0
 8004912:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800491a:	89fb      	ldrh	r3, [r7, #14]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4413      	add	r3, r2
 8004920:	89ba      	ldrh	r2, [r7, #12]
 8004922:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2206      	movs	r2, #6
 8004928:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004932:	3302      	adds	r3, #2
 8004934:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fdcb 	bl	80044d2 <sendTxBuffer>

    return u8CopyBufferSize;
 800493c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7d5a      	ldrb	r2, [r3, #21]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7d9b      	ldrb	r3, [r3, #22]
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f7ff fd40 	bl	80043e0 <word>
 8004960:	4603      	mov	r3, r0
 8004962:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7dda      	ldrb	r2, [r3, #23]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	7e1b      	ldrb	r3, [r3, #24]
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f7ff fd36 	bl	80043e0 <word>
 8004974:	4603      	mov	r3, r0
 8004976:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800497c:	2307      	movs	r3, #7
 800497e:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004980:	2300      	movs	r3, #0
 8004982:	82bb      	strh	r3, [r7, #20]
 8004984:	e058      	b.n	8004a38 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8004986:	8a7a      	ldrh	r2, [r7, #18]
 8004988:	8abb      	ldrh	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800498e:	89bb      	ldrh	r3, [r7, #12]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8004994:	89bb      	ldrh	r3, [r7, #12]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	7cdb      	ldrb	r3, [r3, #19]
 80049a6:	461a      	mov	r2, r3
 80049a8:	7dbb      	ldrb	r3, [r7, #22]
 80049aa:	fa42 f303 	asr.w	r3, r2, r3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80049bc:	7a3b      	ldrb	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <process_FC15+0xa6>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80049c8:	897b      	ldrh	r3, [r7, #10]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	8819      	ldrh	r1, [r3, #0]
 80049d0:	7a7b      	ldrb	r3, [r7, #9]
 80049d2:	2201      	movs	r2, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80049e0:	897b      	ldrh	r3, [r7, #10]
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4403      	add	r3, r0
 80049e6:	430a      	orrs	r2, r1
 80049e8:	b292      	uxth	r2, r2
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	e016      	b.n	8004a1c <process_FC15+0xd4>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	8819      	ldrh	r1, [r3, #0]
 80049fc:	7a7b      	ldrb	r3, [r7, #9]
 80049fe:	2201      	movs	r2, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8004a10:	897b      	ldrh	r3, [r7, #10]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4403      	add	r3, r0
 8004a16:	400a      	ands	r2, r1
 8004a18:	b292      	uxth	r2, r2
 8004a1a:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8004a1c:	7dbb      	ldrb	r3, [r7, #22]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8004a22:	7dbb      	ldrb	r3, [r7, #22]
 8004a24:	2b07      	cmp	r3, #7
 8004a26:	d904      	bls.n	8004a32 <process_FC15+0xea>
        {
            u8bitsno = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004a32:	8abb      	ldrh	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	82bb      	strh	r3, [r7, #20]
 8004a38:	8aba      	ldrh	r2, [r7, #20]
 8004a3a:	8a3b      	ldrh	r3, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d3a2      	bcc.n	8004986 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2206      	movs	r2, #6
 8004a44:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004a4e:	3302      	adds	r3, #2
 8004a50:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fd3d 	bl	80044d2 <sendTxBuffer>
    return u8CopyBufferSize;
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	7d5b      	ldrb	r3, [r3, #21]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	b21a      	sxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	7d9b      	ldrb	r3, [r3, #22]
 8004a78:	b21b      	sxth	r3, r3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	7ddb      	ldrb	r3, [r3, #23]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	b21a      	sxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	7e1b      	ldrb	r3, [r3, #24]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21b      	sxth	r3, r3
 8004a92:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8004a9a:	8a7b      	ldrh	r3, [r7, #18]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2206      	movs	r2, #6
 8004aa6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	82fb      	strh	r3, [r7, #22]
 8004aae:	e01d      	b.n	8004aec <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8004ab0:	8afb      	ldrh	r3, [r7, #22]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	3307      	adds	r3, #7
        temp = word(
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8004abc:	8afb      	ldrh	r3, [r7, #22]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	005b      	lsls	r3, r3, #1
        temp = word(
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	7cdb      	ldrb	r3, [r3, #19]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f7ff fc89 	bl	80043e0 <word>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004ad8:	8ab9      	ldrh	r1, [r7, #20]
 8004ada:	8afb      	ldrh	r3, [r7, #22]
 8004adc:	440b      	add	r3, r1
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	89fa      	ldrh	r2, [r7, #14]
 8004ae4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8004ae6:	8afb      	ldrh	r3, [r7, #22]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	82fb      	strh	r3, [r7, #22]
 8004aec:	8afa      	ldrh	r2, [r7, #22]
 8004aee:	8a7b      	ldrh	r3, [r7, #18]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d3dd      	bcc.n	8004ab0 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004afa:	3302      	adds	r3, #2
 8004afc:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fce7 	bl	80044d2 <sendTxBuffer>

    return u8CopyBufferSize;
 8004b04:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e019      	b.n	8004b56 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8004b22:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <HAL_UART_TxCpltCallback+0x70>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10e      	bne.n	8004b50 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <HAL_UART_TxCpltCallback+0x70>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	2200      	movs	r2, #0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f002 fb65 	bl	8007218 <xTaskGenericNotifyFromISR>
	   		break;
 8004b4e:	e008      	b.n	8004b62 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_UART_TxCpltCallback+0x74>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	dbdf      	blt.n	8004b22 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_UART_TxCpltCallback+0x68>
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_UART_TxCpltCallback+0x78>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200009d4 	.word	0x200009d4
 8004b84:	200009dc 	.word	0x200009dc
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e042      	b.n	8004c24 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d137      	bne.n	8004c1e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8004bae:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d139      	bne.n	8004c32 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8004bbe:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8004bca:	4922      	ldr	r1, [pc, #136]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bd2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fe fc07 	bl	80033ec <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be6:	6858      	ldr	r0, [r3, #4]
 8004be8:	4a1a      	ldr	r2, [pc, #104]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf0:	33a6      	adds	r3, #166	; 0xa6
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f7fd fb7f 	bl	80022f8 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8004bfa:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <HAL_UART_RxCpltCallback+0xc8>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c02:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8004c06:	f001 fd45 	bl	8006694 <xTaskGetTickCountFromISR>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	2100      	movs	r1, #0
 8004c12:	9100      	str	r1, [sp, #0]
 8004c14:	2107      	movs	r1, #7
 8004c16:	4620      	mov	r0, r4
 8004c18:	f002 fcd2 	bl	80075c0 <xTimerGenericCommand>
    		}
    		break;
 8004c1c:	e009      	b.n	8004c32 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <HAL_UART_RxCpltCallback+0xcc>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	dbb6      	blt.n	8004b9e <HAL_UART_RxCpltCallback+0x12>
 8004c30:	e000      	b.n	8004c34 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8004c32:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_UART_RxCpltCallback+0xbe>
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <HAL_UART_RxCpltCallback+0xd0>)
 8004c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200009d4 	.word	0x200009d4
 8004c58:	200009dc 	.word	0x200009dc
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <__NVIC_SetPriority>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	db0a      	blt.n	8004c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	490c      	ldr	r1, [pc, #48]	; (8004cac <__NVIC_SetPriority+0x4c>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c88:	e00a      	b.n	8004ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4908      	ldr	r1, [pc, #32]	; (8004cb0 <__NVIC_SetPriority+0x50>)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3b04      	subs	r3, #4
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	761a      	strb	r2, [r3, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000e100 	.word	0xe000e100
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <SysTick_Handler+0x1c>)
 8004cba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004cbc:	f002 f822 	bl	8006d04 <xTaskGetSchedulerState>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d001      	beq.n	8004cca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004cc6:	f003 f93f 	bl	8007f48 <xPortSysTickHandler>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f06f 0004 	mvn.w	r0, #4
 8004cde:	f7ff ffbf 	bl	8004c60 <__NVIC_SetPriority>
#endif
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cfa:	f06f 0305 	mvn.w	r3, #5
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e00c      	b.n	8004d1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <osKernelInitialize+0x44>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d105      	bne.n	8004d16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <osKernelInitialize+0x44>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e002      	b.n	8004d1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d1c:	687b      	ldr	r3, [r7, #4]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	200009e0 	.word	0x200009e0

08004d30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d36:	f3ef 8305 	mrs	r3, IPSR
 8004d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d42:	f06f 0305 	mvn.w	r3, #5
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e010      	b.n	8004d6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <osKernelStart+0x48>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d109      	bne.n	8004d66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d52:	f7ff ffbf 	bl	8004cd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <osKernelStart+0x48>)
 8004d58:	2202      	movs	r2, #2
 8004d5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d5c:	f001 fb78 	bl	8006450 <vTaskStartScheduler>
      stat = osOK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e002      	b.n	8004d6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d6c:	687b      	ldr	r3, [r7, #4]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200009e0 	.word	0x200009e0

08004d7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af04      	add	r7, sp, #16
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8c:	f3ef 8305 	mrs	r3, IPSR
 8004d90:	617b      	str	r3, [r7, #20]
  return(result);
 8004d92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d17e      	bne.n	8004e96 <osThreadNew+0x11a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d07b      	beq.n	8004e96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004da2:	2318      	movs	r3, #24
 8004da4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d045      	beq.n	8004e42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <osThreadNew+0x48>
        name = attr->name;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <osThreadNew+0x6e>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b38      	cmp	r3, #56	; 0x38
 8004ddc:	d805      	bhi.n	8004dea <osThreadNew+0x6e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <osThreadNew+0x72>
        return (NULL);
 8004dea:	2300      	movs	r3, #0
 8004dec:	e054      	b.n	8004e98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00e      	beq.n	8004e24 <osThreadNew+0xa8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b5b      	cmp	r3, #91	; 0x5b
 8004e0c:	d90a      	bls.n	8004e24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <osThreadNew+0xa8>
        mem = 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e010      	b.n	8004e46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10c      	bne.n	8004e46 <osThreadNew+0xca>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d108      	bne.n	8004e46 <osThreadNew+0xca>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <osThreadNew+0xca>
          mem = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e001      	b.n	8004e46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d110      	bne.n	8004e6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e54:	9202      	str	r2, [sp, #8]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6a3a      	ldr	r2, [r7, #32]
 8004e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f001 f91e 	bl	80060a4 <xTaskCreateStatic>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e013      	b.n	8004e96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d110      	bne.n	8004e96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f107 0310 	add.w	r3, r7, #16
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f001 f969 	bl	800615e <xTaskCreate>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d001      	beq.n	8004e96 <osThreadNew+0x11a>
            hTask = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e96:	693b      	ldr	r3, [r7, #16]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3728      	adds	r7, #40	; 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea8:	f3ef 8305 	mrs	r3, IPSR
 8004eac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <osDelay+0x1c>
    stat = osErrorISR;
 8004eb4:	f06f 0305 	mvn.w	r3, #5
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e007      	b.n	8004ecc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fa8e 	bl	80063e8 <vTaskDelay>
    }
  }

  return (stat);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08a      	sub	sp, #40	; 0x28
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee6:	f3ef 8305 	mrs	r3, IPSR
 8004eea:	613b      	str	r3, [r7, #16]
  return(result);
 8004eec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d175      	bne.n	8004fde <osSemaphoreNew+0x108>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d072      	beq.n	8004fde <osSemaphoreNew+0x108>
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d86e      	bhi.n	8004fde <osSemaphoreNew+0x108>
    mem = -1;
 8004f00:	f04f 33ff 	mov.w	r3, #4294967295
 8004f04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d015      	beq.n	8004f38 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d006      	beq.n	8004f22 <osSemaphoreNew+0x4c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b4f      	cmp	r3, #79	; 0x4f
 8004f1a:	d902      	bls.n	8004f22 <osSemaphoreNew+0x4c>
        mem = 1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e00c      	b.n	8004f3c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <osSemaphoreNew+0x66>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <osSemaphoreNew+0x66>
          mem = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e001      	b.n	8004f3c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d04c      	beq.n	8004fde <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d128      	bne.n	8004f9c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10a      	bne.n	8004f66 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2203      	movs	r2, #3
 8004f56:	9200      	str	r2, [sp, #0]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f000 fa07 	bl	8005370 <xQueueGenericCreateStatic>
 8004f62:	61f8      	str	r0, [r7, #28]
 8004f64:	e005      	b.n	8004f72 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004f66:	2203      	movs	r2, #3
 8004f68:	2100      	movs	r1, #0
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f000 fa78 	bl	8005460 <xQueueGenericCreate>
 8004f70:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d022      	beq.n	8004fbe <osSemaphoreNew+0xe8>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01f      	beq.n	8004fbe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	69f8      	ldr	r0, [r7, #28]
 8004f86:	f000 fb33 	bl	80055f0 <xQueueGenericSend>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d016      	beq.n	8004fbe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004f90:	69f8      	ldr	r0, [r7, #28]
 8004f92:	f000 feb3 	bl	8005cfc <vQueueDelete>
            hSemaphore = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e010      	b.n	8004fbe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d108      	bne.n	8004fb4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fab5 	bl	800551a <xQueueCreateCountingSemaphoreStatic>
 8004fb0:	61f8      	str	r0, [r7, #28]
 8004fb2:	e004      	b.n	8004fbe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fae6 	bl	8005588 <xQueueCreateCountingSemaphore>
 8004fbc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00c      	beq.n	8004fde <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e001      	b.n	8004fd6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004fd6:	6979      	ldr	r1, [r7, #20]
 8004fd8:	69f8      	ldr	r0, [r7, #28]
 8004fda:	f000 ffdb 	bl	8005f94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004fde:	69fb      	ldr	r3, [r7, #28]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff8:	f3ef 8305 	mrs	r3, IPSR
 8004ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005000:	2b00      	cmp	r3, #0
 8005002:	d15f      	bne.n	80050c4 <osMessageQueueNew+0xdc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d05c      	beq.n	80050c4 <osMessageQueueNew+0xdc>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d059      	beq.n	80050c4 <osMessageQueueNew+0xdc>
    mem = -1;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d029      	beq.n	8005070 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <osMessageQueueNew+0x62>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b4f      	cmp	r3, #79	; 0x4f
 800502a:	d90e      	bls.n	800504a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <osMessageQueueNew+0x62>
        mem = 1;
 8005044:	2301      	movs	r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	e014      	b.n	8005074 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d110      	bne.n	8005074 <osMessageQueueNew+0x8c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10c      	bne.n	8005074 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <osMessageQueueNew+0x8c>
          mem = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e001      	b.n	8005074 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10b      	bne.n	8005092 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2100      	movs	r1, #0
 8005084:	9100      	str	r1, [sp, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f971 	bl	8005370 <xQueueGenericCreateStatic>
 800508e:	61f8      	str	r0, [r7, #28]
 8005090:	e008      	b.n	80050a4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005098:	2200      	movs	r2, #0
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f9df 	bl	8005460 <xQueueGenericCreate>
 80050a2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e001      	b.n	80050bc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80050bc:	6979      	ldr	r1, [r7, #20]
 80050be:	69f8      	ldr	r0, [r7, #28]
 80050c0:	f000 ff68 	bl	8005f94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80050c4:	69fb      	ldr	r3, [r7, #28]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a07      	ldr	r2, [pc, #28]	; (80050fc <vApplicationGetIdleTaskMemory+0x2c>)
 80050e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a06      	ldr	r2, [pc, #24]	; (8005100 <vApplicationGetIdleTaskMemory+0x30>)
 80050e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	601a      	str	r2, [r3, #0]
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200009e4 	.word	0x200009e4
 8005100:	20000a40 	.word	0x20000a40

08005104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a07      	ldr	r2, [pc, #28]	; (8005130 <vApplicationGetTimerTaskMemory+0x2c>)
 8005114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a06      	ldr	r2, [pc, #24]	; (8005134 <vApplicationGetTimerTaskMemory+0x30>)
 800511a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000c40 	.word	0x20000c40
 8005134:	20000c9c 	.word	0x20000c9c

08005138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f103 0208 	add.w	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f103 0208 	add.w	r2, r3, #8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f103 0208 	add.w	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d103      	bne.n	80051fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e00c      	b.n	8005214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3308      	adds	r3, #8
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <vListInsert+0x2e>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	d2f6      	bcs.n	8005202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6892      	ldr	r2, [r2, #8]
 8005262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6852      	ldr	r2, [r2, #4]
 800526c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	d103      	bne.n	8005280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	1e5a      	subs	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052ca:	f002 fdab 	bl	8007e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	441a      	add	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	3b01      	subs	r3, #1
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d114      	bne.n	800534a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01a      	beq.n	800535e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3310      	adds	r3, #16
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fb2b 	bl	8006988 <xTaskRemoveFromEventList>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <xQueueGenericReset+0xcc>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	e009      	b.n	800535e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3310      	adds	r3, #16
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fef2 	bl	8005138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3324      	adds	r3, #36	; 0x24
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff feed 	bl	8005138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800535e:	f002 fd91 	bl	8007e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005362:	2301      	movs	r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <xQueueGenericCreateStatic+0x52>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <xQueueGenericCreateStatic+0x56>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueGenericCreateStatic+0x58>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <xQueueGenericCreateStatic+0x7e>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <xQueueGenericCreateStatic+0x82>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueGenericCreateStatic+0x84>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	61fb      	str	r3, [r7, #28]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800540e:	2350      	movs	r3, #80	; 0x50
 8005410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d00a      	beq.n	800542e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61bb      	str	r3, [r7, #24]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800542e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005442:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	4613      	mov	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f83f 	bl	80054d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005458:	4618      	mov	r0, r3
 800545a:	3730      	adds	r7, #48	; 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	613b      	str	r3, [r7, #16]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3350      	adds	r3, #80	; 0x50
 8005498:	4618      	mov	r0, r3
 800549a:	f002 fde5 	bl	8008068 <pvPortMalloc>
 800549e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d011      	beq.n	80054ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3350      	adds	r3, #80	; 0x50
 80054ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054b8:	79fa      	ldrb	r2, [r7, #7]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f805 	bl	80054d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054ca:	69bb      	ldr	r3, [r7, #24]
	}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e002      	b.n	80054f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005502:	2101      	movs	r1, #1
 8005504:	69b8      	ldr	r0, [r7, #24]
 8005506:	f7ff fecb 	bl	80052a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800551a:	b580      	push	{r7, lr}
 800551c:	b08a      	sub	sp, #40	; 0x28
 800551e:	af02      	add	r7, sp, #8
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61bb      	str	r3, [r7, #24]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	429a      	cmp	r2, r3
 8005548:	d90a      	bls.n	8005560 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	617b      	str	r3, [r7, #20]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005560:	2302      	movs	r3, #2
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff ff00 	bl	8005370 <xQueueGenericCreateStatic>
 8005570:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800557e:	69fb      	ldr	r3, [r7, #28]
	}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	613b      	str	r3, [r7, #16]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d90a      	bls.n	80055cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	60fb      	str	r3, [r7, #12]
}
 80055c8:	bf00      	nop
 80055ca:	e7fe      	b.n	80055ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055cc:	2202      	movs	r2, #2
 80055ce:	2100      	movs	r1, #0
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ff45 	bl	8005460 <xQueueGenericCreate>
 80055d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055e4:	697b      	ldr	r3, [r7, #20]
	}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055fe:	2300      	movs	r3, #0
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xQueueGenericSend+0x32>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <xQueueGenericSend+0x40>
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <xQueueGenericSend+0x44>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <xQueueGenericSend+0x46>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xQueueGenericSend+0x60>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d103      	bne.n	800565e <xQueueGenericSend+0x6e>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <xQueueGenericSend+0x72>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSend+0x74>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericSend+0x8e>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800567e:	f001 fb41 	bl	8006d04 <xTaskGetSchedulerState>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <xQueueGenericSend+0x9e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <xQueueGenericSend+0xa2>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueGenericSend+0xa4>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueGenericSend+0xbe>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	61fb      	str	r3, [r7, #28]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ae:	f002 fbb9 	bl	8007e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <xQueueGenericSend+0xd4>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d129      	bne.n	8005718 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ca:	f000 fb52 	bl	8005d72 <prvCopyDataToQueue>
 80056ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	3324      	adds	r3, #36	; 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f953 	bl	8006988 <xTaskRemoveFromEventList>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <xQueueGenericSend+0x1f8>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	e00a      	b.n	8005710 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <xQueueGenericSend+0x1f8>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005710:	f002 fbb8 	bl	8007e84 <vPortExitCritical>
				return pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	e063      	b.n	80057e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800571e:	f002 fbb1 	bl	8007e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
 8005724:	e05c      	b.n	80057e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f98d 	bl	8006a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800573a:	f002 fba3 	bl	8007e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800573e:	f000 feed 	bl	800651c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005742:	f002 fb6f 	bl	8007e24 <vPortEnterCritical>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574c:	b25b      	sxtb	r3, r3
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d103      	bne.n	800575c <xQueueGenericSend+0x16c>
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005762:	b25b      	sxtb	r3, r3
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d103      	bne.n	8005772 <xQueueGenericSend+0x182>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005772:	f002 fb87 	bl	8007e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005776:	1d3a      	adds	r2, r7, #4
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f97c 	bl	8006a7c <xTaskCheckForTimeOut>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d124      	bne.n	80057d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800578a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800578c:	f000 fbe9 	bl	8005f62 <prvIsQueueFull>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	3310      	adds	r3, #16
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f8a2 	bl	80068e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a6:	f000 fb74 	bl	8005e92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057aa:	f000 fec5 	bl	8006538 <xTaskResumeAll>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f47f af7c 	bne.w	80056ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <xQueueGenericSend+0x1f8>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	e772      	b.n	80056ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ca:	f000 fb62 	bl	8005e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ce:	f000 feb3 	bl	8006538 <xTaskResumeAll>
 80057d2:	e76c      	b.n	80056ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fb5c 	bl	8005e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057da:	f000 fead 	bl	8006538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3738      	adds	r7, #56	; 0x38
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b090      	sub	sp, #64	; 0x40
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <xQueueGenericSendFromISR+0x3c>
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueGenericSendFromISR+0x40>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueGenericSendFromISR+0x42>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d103      	bne.n	8005856 <xQueueGenericSendFromISR+0x6a>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <xQueueGenericSendFromISR+0x6e>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericSendFromISR+0x70>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005876:	f002 fbb7 	bl	8007fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800587a:	f3ef 8211 	mrs	r2, BASEPRI
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fa      	str	r2, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005892:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <xQueueGenericSendFromISR+0xbc>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d12f      	bne.n	8005908 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058be:	f000 fa58 	bl	8005d72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d112      	bne.n	80058f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d016      	beq.n	8005902 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	3324      	adds	r3, #36	; 0x24
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f855 	bl	8006988 <xTaskRemoveFromEventList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e007      	b.n	8005902 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058f6:	3301      	adds	r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	b25a      	sxtb	r2, r3
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005902:	2301      	movs	r3, #1
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005906:	e001      	b.n	800590c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005908:	2300      	movs	r3, #0
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005916:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800591a:	4618      	mov	r0, r3
 800591c:	3740      	adds	r7, #64	; 0x40
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <xQueueReceive+0x30>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	623b      	str	r3, [r7, #32]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <xQueueReceive+0x3e>
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <xQueueReceive+0x42>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueReceive+0x44>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xQueueReceive+0x5e>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61fb      	str	r3, [r7, #28]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005982:	f001 f9bf 	bl	8006d04 <xTaskGetSchedulerState>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <xQueueReceive+0x6e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <xQueueReceive+0x72>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <xQueueReceive+0x74>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xQueueReceive+0x8e>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	61bb      	str	r3, [r7, #24]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b2:	f002 fa37 	bl	8007e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01f      	beq.n	8005a02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c6:	f000 fa3e 	bl	8005e46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	1e5a      	subs	r2, r3, #1
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00f      	beq.n	80059fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	3310      	adds	r3, #16
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 ffd2 	bl	8006988 <xTaskRemoveFromEventList>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ea:	4b3d      	ldr	r3, [pc, #244]	; (8005ae0 <xQueueReceive+0x1bc>)
 80059ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059fa:	f002 fa43 	bl	8007e84 <vPortExitCritical>
				return pdPASS;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e069      	b.n	8005ad6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a08:	f002 fa3c 	bl	8007e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e062      	b.n	8005ad6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a16:	f107 0310 	add.w	r3, r7, #16
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 f818 	bl	8006a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a24:	f002 fa2e 	bl	8007e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a28:	f000 fd78 	bl	800651c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a2c:	f002 f9fa 	bl	8007e24 <vPortEnterCritical>
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceive+0x122>
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d103      	bne.n	8005a5c <xQueueReceive+0x138>
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a5c:	f002 fa12 	bl	8007e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a60:	1d3a      	adds	r2, r7, #4
 8005a62:	f107 0310 	add.w	r3, r7, #16
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 f807 	bl	8006a7c <xTaskCheckForTimeOut>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d123      	bne.n	8005abc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a76:	f000 fa5e 	bl	8005f36 <prvIsQueueEmpty>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 ff2d 	bl	80068e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a90:	f000 f9ff 	bl	8005e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a94:	f000 fd50 	bl	8006538 <xTaskResumeAll>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d189      	bne.n	80059b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xQueueReceive+0x1bc>)
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	e780      	b.n	80059b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab2:	f000 f9ee 	bl	8005e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab6:	f000 fd3f 	bl	8006538 <xTaskResumeAll>
 8005aba:	e77a      	b.n	80059b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005abe:	f000 f9e8 	bl	8005e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac2:	f000 fd39 	bl	8006538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac8:	f000 fa35 	bl	8005f36 <prvIsQueueEmpty>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f43f af6f 	beq.w	80059b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ad4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3730      	adds	r7, #48	; 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08e      	sub	sp, #56	; 0x38
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	623b      	str	r3, [r7, #32]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	61fb      	str	r3, [r7, #28]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b34:	f001 f8e6 	bl	8006d04 <xTaskGetSchedulerState>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <xQueueSemaphoreTake+0x60>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <xQueueSemaphoreTake+0x64>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <xQueueSemaphoreTake+0x66>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	61bb      	str	r3, [r7, #24]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b64:	f002 f95e 	bl	8007e24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d024      	beq.n	8005bbe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b84:	f001 fa34 	bl	8006ff0 <pvTaskIncrementMutexHeldCount>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00f      	beq.n	8005bb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	3310      	adds	r3, #16
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fef4 	bl	8006988 <xTaskRemoveFromEventList>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ba6:	4b54      	ldr	r3, [pc, #336]	; (8005cf8 <xQueueSemaphoreTake+0x214>)
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bb6:	f002 f965 	bl	8007e84 <vPortExitCritical>
				return pdPASS;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e097      	b.n	8005cee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d111      	bne.n	8005be8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	617b      	str	r3, [r7, #20]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005be0:	f002 f950 	bl	8007e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e082      	b.n	8005cee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 ff2c 	bl	8006a50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bfc:	f002 f942 	bl	8007e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c00:	f000 fc8c 	bl	800651c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c04:	f002 f90e 	bl	8007e24 <vPortEnterCritical>
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c0e:	b25b      	sxtb	r3, r3
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d103      	bne.n	8005c1e <xQueueSemaphoreTake+0x13a>
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d103      	bne.n	8005c34 <xQueueSemaphoreTake+0x150>
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	f002 f926 	bl	8007e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c38:	463a      	mov	r2, r7
 8005c3a:	f107 030c 	add.w	r3, r7, #12
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 ff1b 	bl	8006a7c <xTaskCheckForTimeOut>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d132      	bne.n	8005cb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c4e:	f000 f972 	bl	8005f36 <prvIsQueueEmpty>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d026      	beq.n	8005ca6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005c60:	f002 f8e0 	bl	8007e24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 f869 	bl	8006d40 <xTaskPriorityInherit>
 8005c6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c70:	f002 f908 	bl	8007e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	3324      	adds	r3, #36	; 0x24
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fe33 	bl	80068e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c84:	f000 f905 	bl	8005e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c88:	f000 fc56 	bl	8006538 <xTaskResumeAll>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f47f af68 	bne.w	8005b64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005c94:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <xQueueSemaphoreTake+0x214>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	e75e      	b.n	8005b64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ca8:	f000 f8f3 	bl	8005e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cac:	f000 fc44 	bl	8006538 <xTaskResumeAll>
 8005cb0:	e758      	b.n	8005b64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb4:	f000 f8ed 	bl	8005e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb8:	f000 fc3e 	bl	8006538 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cbe:	f000 f93a 	bl	8005f36 <prvIsQueueEmpty>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f43f af4d 	beq.w	8005b64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00d      	beq.n	8005cec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005cd0:	f002 f8a8 	bl	8007e24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd6:	f000 f834 	bl	8005d42 <prvGetDisinheritPriorityAfterTimeout>
 8005cda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 f902 	bl	8006eec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ce8:	f002 f8cc 	bl	8007e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3738      	adds	r7, #56	; 0x38
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <vQueueDelete+0x28>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60bb      	str	r3, [r7, #8]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f95f 	bl	8005fe8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f002 fa63 	bl	8008200 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d006      	beq.n	8005d60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e001      	b.n	8005d64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d64:	68fb      	ldr	r3, [r7, #12]
	}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10d      	bne.n	8005dac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d14d      	bne.n	8005e34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f837 	bl	8006e10 <xTaskPriorityDisinherit>
 8005da2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	e043      	b.n	8005e34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d119      	bne.n	8005de6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6858      	ldr	r0, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	f002 fb61 	bl	8008484 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	441a      	add	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d32b      	bcc.n	8005e34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	e026      	b.n	8005e34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68d8      	ldr	r0, [r3, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	461a      	mov	r2, r3
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	f002 fb47 	bl	8008484 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	425b      	negs	r3, r3
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d207      	bcs.n	8005e22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d105      	bne.n	8005e34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e3c:	697b      	ldr	r3, [r7, #20]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d018      	beq.n	8005e8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d303      	bcc.n	8005e7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68d9      	ldr	r1, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	461a      	mov	r2, r3
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	f002 fafd 	bl	8008484 <memcpy>
	}
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e9a:	f001 ffc3 	bl	8007e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ea6:	e011      	b.n	8005ecc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d012      	beq.n	8005ed6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3324      	adds	r3, #36	; 0x24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fd67 	bl	8006988 <xTaskRemoveFromEventList>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ec0:	f000 fe3e 	bl	8006b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dce9      	bgt.n	8005ea8 <prvUnlockQueue+0x16>
 8005ed4:	e000      	b.n	8005ed8 <prvUnlockQueue+0x46>
					break;
 8005ed6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	22ff      	movs	r2, #255	; 0xff
 8005edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ee0:	f001 ffd0 	bl	8007e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ee4:	f001 ff9e 	bl	8007e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef0:	e011      	b.n	8005f16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d012      	beq.n	8005f20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3310      	adds	r3, #16
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fd42 	bl	8006988 <xTaskRemoveFromEventList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f0a:	f000 fe19 	bl	8006b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	dce9      	bgt.n	8005ef2 <prvUnlockQueue+0x60>
 8005f1e:	e000      	b.n	8005f22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f2a:	f001 ffab 	bl	8007e84 <vPortExitCritical>
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f3e:	f001 ff71 	bl	8007e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e001      	b.n	8005f54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f54:	f001 ff96 	bl	8007e84 <vPortExitCritical>

	return xReturn;
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f6a:	f001 ff5b 	bl	8007e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d102      	bne.n	8005f80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e001      	b.n	8005f84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f84:	f001 ff7e 	bl	8007e84 <vPortExitCritical>

	return xReturn;
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e014      	b.n	8005fce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fa4:	4a0f      	ldr	r2, [pc, #60]	; (8005fe4 <vQueueAddToRegistry+0x50>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fb0:	490c      	ldr	r1, [pc, #48]	; (8005fe4 <vQueueAddToRegistry+0x50>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fba:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <vQueueAddToRegistry+0x50>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fc6:	e006      	b.n	8005fd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	d9e7      	bls.n	8005fa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	2000109c 	.word	0x2000109c

08005fe8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	e016      	b.n	8006024 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ff6:	4a10      	ldr	r2, [pc, #64]	; (8006038 <vQueueUnregisterQueue+0x50>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d10b      	bne.n	800601e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006006:	4a0c      	ldr	r2, [pc, #48]	; (8006038 <vQueueUnregisterQueue+0x50>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2100      	movs	r1, #0
 800600c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006010:	4a09      	ldr	r2, [pc, #36]	; (8006038 <vQueueUnregisterQueue+0x50>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	2200      	movs	r2, #0
 800601a:	605a      	str	r2, [r3, #4]
				break;
 800601c:	e006      	b.n	800602c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3301      	adds	r3, #1
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b07      	cmp	r3, #7
 8006028:	d9e5      	bls.n	8005ff6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	2000109c 	.word	0x2000109c

0800603c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800604c:	f001 feea 	bl	8007e24 <vPortEnterCritical>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006056:	b25b      	sxtb	r3, r3
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d103      	bne.n	8006066 <vQueueWaitForMessageRestricted+0x2a>
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606c:	b25b      	sxtb	r3, r3
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d103      	bne.n	800607c <vQueueWaitForMessageRestricted+0x40>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607c:	f001 ff02 	bl	8007e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	d106      	bne.n	8006096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3324      	adds	r3, #36	; 0x24
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fc4d 	bl	8006930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7ff fefb 	bl	8005e92 <prvUnlockQueue>
	}
 800609c:	bf00      	nop
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08e      	sub	sp, #56	; 0x38
 80060a8:	af04      	add	r7, sp, #16
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	623b      	str	r3, [r7, #32]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xTaskCreateStatic+0x46>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61fb      	str	r3, [r7, #28]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ea:	235c      	movs	r3, #92	; 0x5c
 80060ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b5c      	cmp	r3, #92	; 0x5c
 80060f2:	d00a      	beq.n	800610a <xTaskCreateStatic+0x66>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800610a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01e      	beq.n	8006150 <xTaskCreateStatic+0xac>
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01b      	beq.n	8006150 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	2202      	movs	r2, #2
 8006126:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800612a:	2300      	movs	r3, #0
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	9302      	str	r3, [sp, #8]
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f850 	bl	80061e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800614a:	f000 f8dd 	bl	8006308 <prvAddNewTaskToReadyList>
 800614e:	e001      	b.n	8006154 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006154:	697b      	ldr	r3, [r7, #20]
	}
 8006156:	4618      	mov	r0, r3
 8006158:	3728      	adds	r7, #40	; 0x28
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800615e:	b580      	push	{r7, lr}
 8006160:	b08c      	sub	sp, #48	; 0x30
 8006162:	af04      	add	r7, sp, #16
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	603b      	str	r3, [r7, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f001 ff78 	bl	8008068 <pvPortMalloc>
 8006178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00e      	beq.n	800619e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006180:	205c      	movs	r0, #92	; 0x5c
 8006182:	f001 ff71 	bl	8008068 <pvPortMalloc>
 8006186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
 8006194:	e005      	b.n	80061a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f002 f832 	bl	8008200 <vPortFree>
 800619c:	e001      	b.n	80061a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d017      	beq.n	80061d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	9302      	str	r3, [sp, #8]
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f80e 	bl	80061e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061cc:	69f8      	ldr	r0, [r7, #28]
 80061ce:	f000 f89b 	bl	8006308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e002      	b.n	80061de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295
 80061dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061de:	69bb      	ldr	r3, [r7, #24]
	}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	461a      	mov	r2, r3
 8006200:	21a5      	movs	r1, #165	; 0xa5
 8006202:	f002 f94d 	bl	80084a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006210:	3b01      	subs	r3, #1
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <prvInitialiseNewTask+0x58>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	617b      	str	r3, [r7, #20]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01f      	beq.n	8006286 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006246:	2300      	movs	r3, #0
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	e012      	b.n	8006272 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	7819      	ldrb	r1, [r3, #0]
 8006254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	3334      	adds	r3, #52	; 0x34
 800625c:	460a      	mov	r2, r1
 800625e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	2b0f      	cmp	r3, #15
 8006276:	d9e9      	bls.n	800624c <prvInitialiseNewTask+0x64>
 8006278:	e000      	b.n	800627c <prvInitialiseNewTask+0x94>
			{
				break;
 800627a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006284:	e003      	b.n	800628e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2b37      	cmp	r3, #55	; 0x37
 8006292:	d901      	bls.n	8006298 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006294:	2337      	movs	r3, #55	; 0x37
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe ff62 	bl	8005178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	3318      	adds	r3, #24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe ff5d 	bl	8005178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	69b8      	ldr	r0, [r7, #24]
 80062e8:	f001 fc70 	bl	8007bcc <pxPortInitialiseStack>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062fe:	bf00      	nop
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006310:	f001 fd88 	bl	8007e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <prvAddNewTaskToReadyList+0xc4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a2c      	ldr	r2, [pc, #176]	; (80063cc <prvAddNewTaskToReadyList+0xc4>)
 800631c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800631e:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800632c:	4b27      	ldr	r3, [pc, #156]	; (80063cc <prvAddNewTaskToReadyList+0xc4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d110      	bne.n	8006356 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006334:	f000 fc28 	bl	8006b88 <prvInitialiseTaskLists>
 8006338:	e00d      	b.n	8006356 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800633a:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <prvAddNewTaskToReadyList+0xcc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006342:	4b23      	ldr	r3, [pc, #140]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	429a      	cmp	r2, r3
 800634e:	d802      	bhi.n	8006356 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006350:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006356:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <prvAddNewTaskToReadyList+0xd0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <prvAddNewTaskToReadyList+0xd0>)
 800635e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <prvAddNewTaskToReadyList+0xd0>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <prvAddNewTaskToReadyList+0xd4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d903      	bls.n	800637c <prvAddNewTaskToReadyList+0x74>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	4a18      	ldr	r2, [pc, #96]	; (80063dc <prvAddNewTaskToReadyList+0xd4>)
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <prvAddNewTaskToReadyList+0xd8>)
 800638a:	441a      	add	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f7fe fefd 	bl	8005192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006398:	f001 fd74 	bl	8007e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <prvAddNewTaskToReadyList+0xcc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <prvAddNewTaskToReadyList+0xc8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d207      	bcs.n	80063c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063b2:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <prvAddNewTaskToReadyList+0xdc>)
 80063b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200015b0 	.word	0x200015b0
 80063d0:	200010dc 	.word	0x200010dc
 80063d4:	200015bc 	.word	0x200015bc
 80063d8:	200015cc 	.word	0x200015cc
 80063dc:	200015b8 	.word	0x200015b8
 80063e0:	200010e0 	.word	0x200010e0
 80063e4:	e000ed04 	.word	0xe000ed04

080063e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d017      	beq.n	800642a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <vTaskDelay+0x60>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <vTaskDelay+0x30>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	60bb      	str	r3, [r7, #8]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006418:	f000 f880 	bl	800651c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800641c:	2100      	movs	r1, #0
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 ffd6 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006424:	f000 f888 	bl	8006538 <xTaskResumeAll>
 8006428:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <vTaskDelay+0x64>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	200015d8 	.word	0x200015d8
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800645e:	463a      	mov	r2, r7
 8006460:	1d39      	adds	r1, r7, #4
 8006462:	f107 0308 	add.w	r3, r7, #8
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fe32 	bl	80050d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	9202      	str	r2, [sp, #8]
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	2300      	movs	r3, #0
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	2300      	movs	r3, #0
 800647c:	460a      	mov	r2, r1
 800647e:	4921      	ldr	r1, [pc, #132]	; (8006504 <vTaskStartScheduler+0xb4>)
 8006480:	4821      	ldr	r0, [pc, #132]	; (8006508 <vTaskStartScheduler+0xb8>)
 8006482:	f7ff fe0f 	bl	80060a4 <xTaskCreateStatic>
 8006486:	4603      	mov	r3, r0
 8006488:	4a20      	ldr	r2, [pc, #128]	; (800650c <vTaskStartScheduler+0xbc>)
 800648a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800648c:	4b1f      	ldr	r3, [pc, #124]	; (800650c <vTaskStartScheduler+0xbc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e001      	b.n	800649e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d102      	bne.n	80064aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064a4:	f000 ffe8 	bl	8007478 <xTimerCreateTimerTask>
 80064a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d116      	bne.n	80064de <vTaskStartScheduler+0x8e>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <vTaskStartScheduler+0xc0>)
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064cc:	4b11      	ldr	r3, [pc, #68]	; (8006514 <vTaskStartScheduler+0xc4>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064d2:	4b11      	ldr	r3, [pc, #68]	; (8006518 <vTaskStartScheduler+0xc8>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064d8:	f001 fc02 	bl	8007ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064dc:	e00e      	b.n	80064fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d10a      	bne.n	80064fc <vTaskStartScheduler+0xac>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	60fb      	str	r3, [r7, #12]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <vTaskStartScheduler+0xaa>
}
 80064fc:	bf00      	nop
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	08008534 	.word	0x08008534
 8006508:	08006b59 	.word	0x08006b59
 800650c:	200015d4 	.word	0x200015d4
 8006510:	200015d0 	.word	0x200015d0
 8006514:	200015bc 	.word	0x200015bc
 8006518:	200015b4 	.word	0x200015b4

0800651c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <vTaskSuspendAll+0x18>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	4a03      	ldr	r2, [pc, #12]	; (8006534 <vTaskSuspendAll+0x18>)
 8006528:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800652a:	bf00      	nop
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	200015d8 	.word	0x200015d8

08006538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006546:	4b42      	ldr	r3, [pc, #264]	; (8006650 <xTaskResumeAll+0x118>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <xTaskResumeAll+0x2c>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	603b      	str	r3, [r7, #0]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006564:	f001 fc5e 	bl	8007e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006568:	4b39      	ldr	r3, [pc, #228]	; (8006650 <xTaskResumeAll+0x118>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3b01      	subs	r3, #1
 800656e:	4a38      	ldr	r2, [pc, #224]	; (8006650 <xTaskResumeAll+0x118>)
 8006570:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006572:	4b37      	ldr	r3, [pc, #220]	; (8006650 <xTaskResumeAll+0x118>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d162      	bne.n	8006640 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800657a:	4b36      	ldr	r3, [pc, #216]	; (8006654 <xTaskResumeAll+0x11c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d05e      	beq.n	8006640 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006582:	e02f      	b.n	80065e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006584:	4b34      	ldr	r3, [pc, #208]	; (8006658 <xTaskResumeAll+0x120>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3318      	adds	r3, #24
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fe5b 	bl	800524c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fe56 	bl	800524c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	4b2d      	ldr	r3, [pc, #180]	; (800665c <xTaskResumeAll+0x124>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d903      	bls.n	80065b4 <xTaskResumeAll+0x7c>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a2a      	ldr	r2, [pc, #168]	; (800665c <xTaskResumeAll+0x124>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4a27      	ldr	r2, [pc, #156]	; (8006660 <xTaskResumeAll+0x128>)
 80065c2:	441a      	add	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fe fde1 	bl	8005192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <xTaskResumeAll+0x12c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065de:	4b22      	ldr	r3, [pc, #136]	; (8006668 <xTaskResumeAll+0x130>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <xTaskResumeAll+0x120>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1cb      	bne.n	8006584 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065f2:	f000 fb67 	bl	8006cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <xTaskResumeAll+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d010      	beq.n	8006624 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006602:	f000 f859 	bl	80066b8 <xTaskIncrementTick>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800660c:	4b16      	ldr	r3, [pc, #88]	; (8006668 <xTaskResumeAll+0x130>)
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3b01      	subs	r3, #1
 8006616:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f1      	bne.n	8006602 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <xTaskResumeAll+0x134>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <xTaskResumeAll+0x130>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <xTaskResumeAll+0x138>)
 8006632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006640:	f001 fc20 	bl	8007e84 <vPortExitCritical>

	return xAlreadyYielded;
 8006644:	68bb      	ldr	r3, [r7, #8]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200015d8 	.word	0x200015d8
 8006654:	200015b0 	.word	0x200015b0
 8006658:	20001570 	.word	0x20001570
 800665c:	200015b8 	.word	0x200015b8
 8006660:	200010e0 	.word	0x200010e0
 8006664:	200010dc 	.word	0x200010dc
 8006668:	200015c4 	.word	0x200015c4
 800666c:	200015c0 	.word	0x200015c0
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <xTaskGetTickCount+0x1c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006680:	687b      	ldr	r3, [r7, #4]
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	200015b4 	.word	0x200015b4

08006694 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800669a:	f001 fca5 	bl	8007fe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80066a2:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <xTaskGetTickCountFromISR+0x20>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a8:	683b      	ldr	r3, [r7, #0]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200015b4 	.word	0x200015b4

080066b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c2:	4b4f      	ldr	r3, [pc, #316]	; (8006800 <xTaskIncrementTick+0x148>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 808f 	bne.w	80067ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066cc:	4b4d      	ldr	r3, [pc, #308]	; (8006804 <xTaskIncrementTick+0x14c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066d4:	4a4b      	ldr	r2, [pc, #300]	; (8006804 <xTaskIncrementTick+0x14c>)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d120      	bne.n	8006722 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066e0:	4b49      	ldr	r3, [pc, #292]	; (8006808 <xTaskIncrementTick+0x150>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <xTaskIncrementTick+0x48>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	603b      	str	r3, [r7, #0]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <xTaskIncrementTick+0x46>
 8006700:	4b41      	ldr	r3, [pc, #260]	; (8006808 <xTaskIncrementTick+0x150>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	4b41      	ldr	r3, [pc, #260]	; (800680c <xTaskIncrementTick+0x154>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a3f      	ldr	r2, [pc, #252]	; (8006808 <xTaskIncrementTick+0x150>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4a3f      	ldr	r2, [pc, #252]	; (800680c <xTaskIncrementTick+0x154>)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	4b3e      	ldr	r3, [pc, #248]	; (8006810 <xTaskIncrementTick+0x158>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <xTaskIncrementTick+0x158>)
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	f000 fad1 	bl	8006cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006722:	4b3c      	ldr	r3, [pc, #240]	; (8006814 <xTaskIncrementTick+0x15c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	429a      	cmp	r2, r3
 800672a:	d349      	bcc.n	80067c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <xTaskIncrementTick+0x150>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006736:	4b37      	ldr	r3, [pc, #220]	; (8006814 <xTaskIncrementTick+0x15c>)
 8006738:	f04f 32ff 	mov.w	r2, #4294967295
 800673c:	601a      	str	r2, [r3, #0]
					break;
 800673e:	e03f      	b.n	80067c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006740:	4b31      	ldr	r3, [pc, #196]	; (8006808 <xTaskIncrementTick+0x150>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d203      	bcs.n	8006760 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006758:	4a2e      	ldr	r2, [pc, #184]	; (8006814 <xTaskIncrementTick+0x15c>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800675e:	e02f      	b.n	80067c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fd71 	bl	800524c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3318      	adds	r3, #24
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fd68 	bl	800524c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <xTaskIncrementTick+0x160>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d903      	bls.n	8006790 <xTaskIncrementTick+0xd8>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a22      	ldr	r2, [pc, #136]	; (8006818 <xTaskIncrementTick+0x160>)
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4a1f      	ldr	r2, [pc, #124]	; (800681c <xTaskIncrementTick+0x164>)
 800679e:	441a      	add	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7fe fcf3 	bl	8005192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <xTaskIncrementTick+0x168>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d3b8      	bcc.n	800672c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067be:	e7b5      	b.n	800672c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <xTaskIncrementTick+0x168>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c6:	4915      	ldr	r1, [pc, #84]	; (800681c <xTaskIncrementTick+0x164>)
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d901      	bls.n	80067dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <xTaskIncrementTick+0x16c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e004      	b.n	80067f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <xTaskIncrementTick+0x170>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3301      	adds	r3, #1
 80067f0:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <xTaskIncrementTick+0x170>)
 80067f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067f4:	697b      	ldr	r3, [r7, #20]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200015d8 	.word	0x200015d8
 8006804:	200015b4 	.word	0x200015b4
 8006808:	20001568 	.word	0x20001568
 800680c:	2000156c 	.word	0x2000156c
 8006810:	200015c8 	.word	0x200015c8
 8006814:	200015d0 	.word	0x200015d0
 8006818:	200015b8 	.word	0x200015b8
 800681c:	200010e0 	.word	0x200010e0
 8006820:	200010dc 	.word	0x200010dc
 8006824:	200015c4 	.word	0x200015c4
 8006828:	200015c0 	.word	0x200015c0

0800682c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006832:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <vTaskSwitchContext+0xa8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800683a:	4b27      	ldr	r3, [pc, #156]	; (80068d8 <vTaskSwitchContext+0xac>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006840:	e041      	b.n	80068c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006842:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <vTaskSwitchContext+0xac>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <vTaskSwitchContext+0xb0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e010      	b.n	8006872 <vTaskSwitchContext+0x46>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <vTaskSwitchContext+0x40>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	607b      	str	r3, [r7, #4]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <vTaskSwitchContext+0x3e>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3b01      	subs	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	491b      	ldr	r1, [pc, #108]	; (80068e0 <vTaskSwitchContext+0xb4>)
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0e4      	beq.n	8006850 <vTaskSwitchContext+0x24>
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <vTaskSwitchContext+0xb4>)
 8006892:	4413      	add	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	3308      	adds	r3, #8
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d104      	bne.n	80068b6 <vTaskSwitchContext+0x8a>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	605a      	str	r2, [r3, #4]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4a09      	ldr	r2, [pc, #36]	; (80068e4 <vTaskSwitchContext+0xb8>)
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	4a06      	ldr	r2, [pc, #24]	; (80068dc <vTaskSwitchContext+0xb0>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6013      	str	r3, [r2, #0]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	200015d8 	.word	0x200015d8
 80068d8:	200015c4 	.word	0x200015c4
 80068dc:	200015b8 	.word	0x200015b8
 80068e0:	200010e0 	.word	0x200010e0
 80068e4:	200010dc 	.word	0x200010dc

080068e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	60fb      	str	r3, [r7, #12]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800690e:	4b07      	ldr	r3, [pc, #28]	; (800692c <vTaskPlaceOnEventList+0x44>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3318      	adds	r3, #24
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe fc5f 	bl	80051da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800691c:	2101      	movs	r1, #1
 800691e:	6838      	ldr	r0, [r7, #0]
 8006920:	f000 fd56 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200010dc 	.word	0x200010dc

08006930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	617b      	str	r3, [r7, #20]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <vTaskPlaceOnEventListRestricted+0x54>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3318      	adds	r3, #24
 800695e:	4619      	mov	r1, r3
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7fe fc16 	bl	8005192 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f000 fd2b 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
	}
 800697a:	bf00      	nop
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200010dc 	.word	0x200010dc

08006988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60fb      	str	r3, [r7, #12]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3318      	adds	r3, #24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fc47 	bl	800524c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069be:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <xTaskRemoveFromEventList+0xb0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11d      	bne.n	8006a02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fc3e 	bl	800524c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <xTaskRemoveFromEventList+0xb4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d903      	bls.n	80069e4 <xTaskRemoveFromEventList+0x5c>
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <xTaskRemoveFromEventList+0xb4>)
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <xTaskRemoveFromEventList+0xb8>)
 80069f2:	441a      	add	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7fe fbc9 	bl	8005192 <vListInsertEnd>
 8006a00:	e005      	b.n	8006a0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3318      	adds	r3, #24
 8006a06:	4619      	mov	r1, r3
 8006a08:	480e      	ldr	r0, [pc, #56]	; (8006a44 <xTaskRemoveFromEventList+0xbc>)
 8006a0a:	f7fe fbc2 	bl	8005192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <xTaskRemoveFromEventList+0xc0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d905      	bls.n	8006a28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <xTaskRemoveFromEventList+0xc4>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e001      	b.n	8006a2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a2c:	697b      	ldr	r3, [r7, #20]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200015d8 	.word	0x200015d8
 8006a3c:	200015b8 	.word	0x200015b8
 8006a40:	200010e0 	.word	0x200010e0
 8006a44:	20001570 	.word	0x20001570
 8006a48:	200010dc 	.word	0x200010dc
 8006a4c:	200015c4 	.word	0x200015c4

08006a50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <vTaskInternalSetTimeOutState+0x24>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <vTaskInternalSetTimeOutState+0x28>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	200015c8 	.word	0x200015c8
 8006a78:	200015b4 	.word	0x200015b4

08006a7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	613b      	str	r3, [r7, #16]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006abe:	f001 f9b1 	bl	8007e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <xTaskCheckForTimeOut+0xbc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d102      	bne.n	8006ae2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e023      	b.n	8006b2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <xTaskCheckForTimeOut+0xc0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d007      	beq.n	8006afe <xTaskCheckForTimeOut+0x82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d302      	bcc.n	8006afe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	e015      	b.n	8006b2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d20b      	bcs.n	8006b20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff ff9b 	bl	8006a50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
 8006b1e:	e004      	b.n	8006b2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b26:	2301      	movs	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b2a:	f001 f9ab 	bl	8007e84 <vPortExitCritical>

	return xReturn;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	200015b4 	.word	0x200015b4
 8006b3c:	200015c8 	.word	0x200015c8

08006b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <vTaskMissedYield+0x14>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	200015c4 	.word	0x200015c4

08006b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b60:	f000 f852 	bl	8006c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <prvIdleTask+0x28>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d9f9      	bls.n	8006b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <prvIdleTask+0x2c>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b7c:	e7f0      	b.n	8006b60 <prvIdleTask+0x8>
 8006b7e:	bf00      	nop
 8006b80:	200010e0 	.word	0x200010e0
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	e00c      	b.n	8006bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <prvInitialiseTaskLists+0x60>)
 8006ba0:	4413      	add	r3, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fac8 	bl	8005138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3301      	adds	r3, #1
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b37      	cmp	r3, #55	; 0x37
 8006bb2:	d9ef      	bls.n	8006b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bb4:	480d      	ldr	r0, [pc, #52]	; (8006bec <prvInitialiseTaskLists+0x64>)
 8006bb6:	f7fe fabf 	bl	8005138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bba:	480d      	ldr	r0, [pc, #52]	; (8006bf0 <prvInitialiseTaskLists+0x68>)
 8006bbc:	f7fe fabc 	bl	8005138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bc0:	480c      	ldr	r0, [pc, #48]	; (8006bf4 <prvInitialiseTaskLists+0x6c>)
 8006bc2:	f7fe fab9 	bl	8005138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bc6:	480c      	ldr	r0, [pc, #48]	; (8006bf8 <prvInitialiseTaskLists+0x70>)
 8006bc8:	f7fe fab6 	bl	8005138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bcc:	480b      	ldr	r0, [pc, #44]	; (8006bfc <prvInitialiseTaskLists+0x74>)
 8006bce:	f7fe fab3 	bl	8005138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <prvInitialiseTaskLists+0x78>)
 8006bd4:	4a05      	ldr	r2, [pc, #20]	; (8006bec <prvInitialiseTaskLists+0x64>)
 8006bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <prvInitialiseTaskLists+0x7c>)
 8006bda:	4a05      	ldr	r2, [pc, #20]	; (8006bf0 <prvInitialiseTaskLists+0x68>)
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	200010e0 	.word	0x200010e0
 8006bec:	20001540 	.word	0x20001540
 8006bf0:	20001554 	.word	0x20001554
 8006bf4:	20001570 	.word	0x20001570
 8006bf8:	20001584 	.word	0x20001584
 8006bfc:	2000159c 	.word	0x2000159c
 8006c00:	20001568 	.word	0x20001568
 8006c04:	2000156c 	.word	0x2000156c

08006c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c0e:	e019      	b.n	8006c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c10:	f001 f908 	bl	8007e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c14:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <prvCheckTasksWaitingTermination+0x50>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe fb13 	bl	800524c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <prvCheckTasksWaitingTermination+0x54>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	4a0b      	ldr	r2, [pc, #44]	; (8006c5c <prvCheckTasksWaitingTermination+0x54>)
 8006c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <prvCheckTasksWaitingTermination+0x58>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <prvCheckTasksWaitingTermination+0x58>)
 8006c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c3a:	f001 f923 	bl	8007e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f810 	bl	8006c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <prvCheckTasksWaitingTermination+0x58>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e1      	bne.n	8006c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20001584 	.word	0x20001584
 8006c5c:	200015b0 	.word	0x200015b0
 8006c60:	20001598 	.word	0x20001598

08006c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d108      	bne.n	8006c88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 fac0 	bl	8008200 <vPortFree>
				vPortFree( pxTCB );
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fabd 	bl	8008200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c86:	e018      	b.n	8006cba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d103      	bne.n	8006c9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fab4 	bl	8008200 <vPortFree>
	}
 8006c98:	e00f      	b.n	8006cba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d00a      	beq.n	8006cba <prvDeleteTCB+0x56>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60fb      	str	r3, [r7, #12]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <prvDeleteTCB+0x54>
	}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <prvResetNextTaskUnblockTime+0x38>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <prvResetNextTaskUnblockTime+0x3c>)
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cdc:	e008      	b.n	8006cf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <prvResetNextTaskUnblockTime+0x38>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4a04      	ldr	r2, [pc, #16]	; (8006d00 <prvResetNextTaskUnblockTime+0x3c>)
 8006cee:	6013      	str	r3, [r2, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20001568 	.word	0x20001568
 8006d00:	200015d0 	.word	0x200015d0

08006d04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <xTaskGetSchedulerState+0x34>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d12:	2301      	movs	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	e008      	b.n	8006d2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <xTaskGetSchedulerState+0x38>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d20:	2302      	movs	r3, #2
 8006d22:	607b      	str	r3, [r7, #4]
 8006d24:	e001      	b.n	8006d2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d26:	2300      	movs	r3, #0
 8006d28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d2a:	687b      	ldr	r3, [r7, #4]
	}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200015bc 	.word	0x200015bc
 8006d3c:	200015d8 	.word	0x200015d8

08006d40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d051      	beq.n	8006dfa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <xTaskPriorityInherit+0xc4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d241      	bcs.n	8006de8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	db06      	blt.n	8006d7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d6c:	4b25      	ldr	r3, [pc, #148]	; (8006e04 <xTaskPriorityInherit+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6959      	ldr	r1, [r3, #20]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4a1f      	ldr	r2, [pc, #124]	; (8006e08 <xTaskPriorityInherit+0xc8>)
 8006d8c:	4413      	add	r3, r2
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	d122      	bne.n	8006dd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fa58 	bl	800524c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <xTaskPriorityInherit+0xc4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4b18      	ldr	r3, [pc, #96]	; (8006e0c <xTaskPriorityInherit+0xcc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d903      	bls.n	8006dba <xTaskPriorityInherit+0x7a>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <xTaskPriorityInherit+0xcc>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <xTaskPriorityInherit+0xc8>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe f9de 	bl	8005192 <vListInsertEnd>
 8006dd6:	e004      	b.n	8006de2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <xTaskPriorityInherit+0xc4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e008      	b.n	8006dfa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <xTaskPriorityInherit+0xc4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d201      	bcs.n	8006dfa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
	}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	200010dc 	.word	0x200010dc
 8006e08:	200010e0 	.word	0x200010e0
 8006e0c:	200015b8 	.word	0x200015b8

08006e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d056      	beq.n	8006ed4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e26:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <xTaskPriorityDisinherit+0xd0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d00a      	beq.n	8006e46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60bb      	str	r3, [r7, #8]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d02c      	beq.n	8006ed4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d128      	bne.n	8006ed4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe f9e0 	bl	800524c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <xTaskPriorityDisinherit+0xd4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d903      	bls.n	8006eb4 <xTaskPriorityDisinherit+0xa4>
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <xTaskPriorityDisinherit+0xd4>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <xTaskPriorityDisinherit+0xd8>)
 8006ec2:	441a      	add	r2, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe f961 	bl	8005192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ed4:	697b      	ldr	r3, [r7, #20]
	}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	200010dc 	.word	0x200010dc
 8006ee4:	200015b8 	.word	0x200015b8
 8006ee8:	200010e0 	.word	0x200010e0

08006eec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d06a      	beq.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	60fb      	str	r3, [r7, #12]
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d902      	bls.n	8006f32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	61fb      	str	r3, [r7, #28]
 8006f30:	e002      	b.n	8006f38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d04b      	beq.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d146      	bne.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f4c:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d10a      	bne.n	8006f6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60bb      	str	r3, [r7, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db04      	blt.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f9a:	4413      	add	r3, r2
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	d11c      	bne.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe f951 	bl	800524c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d903      	bls.n	8006fbe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4a07      	ldr	r2, [pc, #28]	; (8006fe8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006fcc:	441a      	add	r2, r3
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7fe f8dc 	bl	8005192 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fda:	bf00      	nop
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200010dc 	.word	0x200010dc
 8006fe8:	200010e0 	.word	0x200010e0
 8006fec:	200015b8 	.word	0x200015b8

08006ff0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007002:	3201      	adds	r2, #1
 8007004:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007006:	4b03      	ldr	r3, [pc, #12]	; (8007014 <pvTaskIncrementMutexHeldCount+0x24>)
 8007008:	681b      	ldr	r3, [r3, #0]
	}
 800700a:	4618      	mov	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	200010dc 	.word	0x200010dc

08007018 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007022:	f000 feff 	bl	8007e24 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007026:	4b1e      	ldr	r3, [pc, #120]	; (80070a0 <ulTaskNotifyTake+0x88>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702c:	2b00      	cmp	r3, #0
 800702e:	d113      	bne.n	8007058 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007030:	4b1b      	ldr	r3, [pc, #108]	; (80070a0 <ulTaskNotifyTake+0x88>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007040:	2101      	movs	r1, #1
 8007042:	6838      	ldr	r0, [r7, #0]
 8007044:	f000 f9c4 	bl	80073d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <ulTaskNotifyTake+0x8c>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007058:	f000 ff14 	bl	8007e84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800705c:	f000 fee2 	bl	8007e24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <ulTaskNotifyTake+0x88>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007074:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <ulTaskNotifyTake+0x88>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	; 0x54
 800707c:	e004      	b.n	8007088 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800707e:	4b08      	ldr	r3, [pc, #32]	; (80070a0 <ulTaskNotifyTake+0x88>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	3a01      	subs	r2, #1
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <ulTaskNotifyTake+0x88>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8007092:	f000 fef7 	bl	8007e84 <vPortExitCritical>

		return ulReturn;
 8007096:	68fb      	ldr	r3, [r7, #12]
	}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	200010dc 	.word	0x200010dc
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80070b8:	2301      	movs	r3, #1
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <xTaskGenericNotify+0x30>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	61bb      	str	r3, [r7, #24]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80070dc:	f000 fea2 	bl	8007e24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80070f4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	2b04      	cmp	r3, #4
 8007102:	d828      	bhi.n	8007156 <xTaskGenericNotify+0xae>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <xTaskGenericNotify+0x64>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007177 	.word	0x08007177
 8007110:	08007121 	.word	0x08007121
 8007114:	0800712f 	.word	0x0800712f
 8007118:	0800713b 	.word	0x0800713b
 800711c:	08007143 	.word	0x08007143
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	431a      	orrs	r2, r3
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800712c:	e026      	b.n	800717c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007138:	e020      	b.n	800717c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007140:	e01c      	b.n	800717c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007142:	7ffb      	ldrb	r3, [r7, #31]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d003      	beq.n	8007150 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800714e:	e015      	b.n	800717c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8007150:	2300      	movs	r3, #0
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007154:	e012      	b.n	800717c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d00c      	beq.n	800717a <xTaskGenericNotify+0xd2>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	617b      	str	r3, [r7, #20]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xTaskGenericNotify+0xcc>
					break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <xTaskGenericNotify+0xd4>

					break;
 800717a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800717c:	7ffb      	ldrb	r3, [r7, #31]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d13a      	bne.n	80071f8 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe f860 	bl	800524c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <xTaskGenericNotify+0x160>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d903      	bls.n	80071a0 <xTaskGenericNotify+0xf8>
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <xTaskGenericNotify+0x160>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a17      	ldr	r2, [pc, #92]	; (800720c <xTaskGenericNotify+0x164>)
 80071ae:	441a      	add	r2, r3
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fd ffeb 	bl	8005192 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <xTaskGenericNotify+0x132>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	613b      	str	r3, [r7, #16]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <xTaskGenericNotify+0x168>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d907      	bls.n	80071f8 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <xTaskGenericNotify+0x16c>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80071f8:	f000 fe44 	bl	8007e84 <vPortExitCritical>

		return xReturn;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80071fe:	4618      	mov	r0, r3
 8007200:	3728      	adds	r7, #40	; 0x28
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200015b8 	.word	0x200015b8
 800720c:	200010e0 	.word	0x200010e0
 8007210:	200010dc 	.word	0x200010dc
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08e      	sub	sp, #56	; 0x38
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007228:	2301      	movs	r3, #1
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007248:	f000 fece 	bl	8007fe8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007250:	f3ef 8211 	mrs	r2, BASEPRI
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	623a      	str	r2, [r7, #32]
 8007266:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007268:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b04      	cmp	r3, #4
 8007290:	d828      	bhi.n	80072e4 <xTaskGenericNotifyFromISR+0xcc>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <xTaskGenericNotifyFromISR+0x80>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	08007305 	.word	0x08007305
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072bb 	.word	0x080072bb
 80072a4:	080072c7 	.word	0x080072c7
 80072a8:	080072cf 	.word	0x080072cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80072b8:	e027      	b.n	800730a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80072c4:	e021      	b.n	800730a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80072cc:	e01d      	b.n	800730a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80072ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d003      	beq.n	80072de <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80072dc:	e015      	b.n	800730a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80072de:	2300      	movs	r3, #0
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80072e2:	e012      	b.n	800730a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d00c      	beq.n	8007308 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	61bb      	str	r3, [r7, #24]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <xTaskGenericNotifyFromISR+0xea>
					break;
 8007304:	bf00      	nop
 8007306:	e000      	b.n	800730a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8007308:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800730a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800730e:	2b01      	cmp	r3, #1
 8007310:	d146      	bne.n	80073a0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	617b      	str	r3, [r7, #20]
}
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007330:	4b21      	ldr	r3, [pc, #132]	; (80073b8 <xTaskGenericNotifyFromISR+0x1a0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d11d      	bne.n	8007374 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	3304      	adds	r3, #4
 800733c:	4618      	mov	r0, r3
 800733e:	f7fd ff85 	bl	800524c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <xTaskGenericNotifyFromISR+0x1a4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d903      	bls.n	8007356 <xTaskGenericNotifyFromISR+0x13e>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <xTaskGenericNotifyFromISR+0x1a4>)
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4a17      	ldr	r2, [pc, #92]	; (80073c0 <xTaskGenericNotifyFromISR+0x1a8>)
 8007364:	441a      	add	r2, r3
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fd ff10 	bl	8005192 <vListInsertEnd>
 8007372:	e005      	b.n	8007380 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	3318      	adds	r3, #24
 8007378:	4619      	mov	r1, r3
 800737a:	4812      	ldr	r0, [pc, #72]	; (80073c4 <xTaskGenericNotifyFromISR+0x1ac>)
 800737c:	f7fd ff09 	bl	8005192 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <xTaskGenericNotifyFromISR+0x1b0>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	429a      	cmp	r2, r3
 800738c:	d908      	bls.n	80073a0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800738e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800739a:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <xTaskGenericNotifyFromISR+0x1b4>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f383 8811 	msr	BASEPRI, r3
}
 80073aa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80073ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3738      	adds	r7, #56	; 0x38
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200015d8 	.word	0x200015d8
 80073bc:	200015b8 	.word	0x200015b8
 80073c0:	200010e0 	.word	0x200010e0
 80073c4:	20001570 	.word	0x20001570
 80073c8:	200010dc 	.word	0x200010dc
 80073cc:	200015c4 	.word	0x200015c4

080073d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073da:	4b21      	ldr	r3, [pc, #132]	; (8007460 <prvAddCurrentTaskToDelayedList+0x90>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e0:	4b20      	ldr	r3, [pc, #128]	; (8007464 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fd ff30 	bl	800524c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f2:	d10a      	bne.n	800740a <prvAddCurrentTaskToDelayedList+0x3a>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073fa:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <prvAddCurrentTaskToDelayedList+0x94>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4819      	ldr	r0, [pc, #100]	; (8007468 <prvAddCurrentTaskToDelayedList+0x98>)
 8007404:	f7fd fec5 	bl	8005192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007408:	e026      	b.n	8007458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007412:	4b14      	ldr	r3, [pc, #80]	; (8007464 <prvAddCurrentTaskToDelayedList+0x94>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	429a      	cmp	r2, r3
 8007420:	d209      	bcs.n	8007436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007422:	4b12      	ldr	r3, [pc, #72]	; (800746c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <prvAddCurrentTaskToDelayedList+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7fd fed3 	bl	80051da <vListInsert>
}
 8007434:	e010      	b.n	8007458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007436:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <prvAddCurrentTaskToDelayedList+0x94>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fd fec9 	bl	80051da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d202      	bcs.n	8007458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007452:	4a08      	ldr	r2, [pc, #32]	; (8007474 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6013      	str	r3, [r2, #0]
}
 8007458:	bf00      	nop
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	200015b4 	.word	0x200015b4
 8007464:	200010dc 	.word	0x200010dc
 8007468:	2000159c 	.word	0x2000159c
 800746c:	2000156c 	.word	0x2000156c
 8007470:	20001568 	.word	0x20001568
 8007474:	200015d0 	.word	0x200015d0

08007478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007482:	f000 fb63 	bl	8007b4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007486:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <xTimerCreateTimerTask+0x80>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d021      	beq.n	80074d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007496:	1d3a      	adds	r2, r7, #4
 8007498:	f107 0108 	add.w	r1, r7, #8
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd fe2f 	bl	8005104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	9202      	str	r2, [sp, #8]
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	2302      	movs	r3, #2
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	2300      	movs	r3, #0
 80074b6:	460a      	mov	r2, r1
 80074b8:	4910      	ldr	r1, [pc, #64]	; (80074fc <xTimerCreateTimerTask+0x84>)
 80074ba:	4811      	ldr	r0, [pc, #68]	; (8007500 <xTimerCreateTimerTask+0x88>)
 80074bc:	f7fe fdf2 	bl	80060a4 <xTaskCreateStatic>
 80074c0:	4603      	mov	r3, r0
 80074c2:	4a10      	ldr	r2, [pc, #64]	; (8007504 <xTimerCreateTimerTask+0x8c>)
 80074c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <xTimerCreateTimerTask+0x8c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ce:	2301      	movs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	613b      	str	r3, [r7, #16]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074ee:	697b      	ldr	r3, [r7, #20]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	2000160c 	.word	0x2000160c
 80074fc:	0800853c 	.word	0x0800853c
 8007500:	080076f5 	.word	0x080076f5
 8007504:	20001610 	.word	0x20001610

08007508 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007516:	202c      	movs	r0, #44	; 0x2c
 8007518:	f000 fda6 	bl	8008068 <pvPortMalloc>
 800751c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00d      	beq.n	8007540 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f805 	bl	800754a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007540:	697b      	ldr	r3, [r7, #20]
	}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	617b      	str	r3, [r7, #20]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01e      	beq.n	80075b8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800757a:	f000 fae7 	bl	8007b4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd fdec 	bl	8005178 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ac:	f043 0304 	orr.w	r3, r3, #4
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80075b8:	bf00      	nop
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	; 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	623b      	str	r3, [r7, #32]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075ee:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <xTimerGenericCommand+0x98>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d02a      	beq.n	800764c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b05      	cmp	r3, #5
 8007606:	dc18      	bgt.n	800763a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007608:	f7ff fb7c 	bl	8006d04 <xTaskGetSchedulerState>
 800760c:	4603      	mov	r3, r0
 800760e:	2b02      	cmp	r3, #2
 8007610:	d109      	bne.n	8007626 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007612:	4b11      	ldr	r3, [pc, #68]	; (8007658 <xTimerGenericCommand+0x98>)
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f107 0110 	add.w	r1, r7, #16
 800761a:	2300      	movs	r3, #0
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	f7fd ffe7 	bl	80055f0 <xQueueGenericSend>
 8007622:	6278      	str	r0, [r7, #36]	; 0x24
 8007624:	e012      	b.n	800764c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <xTimerGenericCommand+0x98>)
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f107 0110 	add.w	r1, r7, #16
 800762e:	2300      	movs	r3, #0
 8007630:	2200      	movs	r2, #0
 8007632:	f7fd ffdd 	bl	80055f0 <xQueueGenericSend>
 8007636:	6278      	str	r0, [r7, #36]	; 0x24
 8007638:	e008      	b.n	800764c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <xTimerGenericCommand+0x98>)
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	f107 0110 	add.w	r1, r7, #16
 8007642:	2300      	movs	r3, #0
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	f7fe f8d1 	bl	80057ec <xQueueGenericSendFromISR>
 800764a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800764e:	4618      	mov	r0, r3
 8007650:	3728      	adds	r7, #40	; 0x28
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	2000160c 	.word	0x2000160c

0800765c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b22      	ldr	r3, [pc, #136]	; (80076f0 <prvProcessExpiredTimer+0x94>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fd fde9 	bl	800524c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d022      	beq.n	80076ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	18d1      	adds	r1, r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f000 f8d1 	bl	800783c <prvInsertTimerInActiveList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01f      	beq.n	80076e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076a0:	2300      	movs	r3, #0
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	6978      	ldr	r0, [r7, #20]
 80076ac:	f7ff ff88 	bl	80075c0 <xTimerGenericCommand>
 80076b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d113      	bne.n	80076e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	6978      	ldr	r0, [r7, #20]
 80076e6:	4798      	blx	r3
}
 80076e8:	bf00      	nop
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20001604 	.word	0x20001604

080076f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076fc:	f107 0308 	add.w	r3, r7, #8
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f857 	bl	80077b4 <prvGetNextExpireTime>
 8007706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4619      	mov	r1, r3
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f803 	bl	8007718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007712:	f000 f8d5 	bl	80078c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007716:	e7f1      	b.n	80076fc <prvTimerTask+0x8>

08007718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007722:	f7fe fefb 	bl	800651c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f866 	bl	80077fc <prvSampleTimeNow>
 8007730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d130      	bne.n	800779a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <prvProcessTimerOrBlockTask+0x3c>
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	429a      	cmp	r2, r3
 8007744:	d806      	bhi.n	8007754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007746:	f7fe fef7 	bl	8006538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff ff85 	bl	800765c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007752:	e024      	b.n	800779e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800775a:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <prvProcessTimerOrBlockTask+0x90>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <prvProcessTimerOrBlockTask+0x50>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <prvProcessTimerOrBlockTask+0x52>
 8007768:	2300      	movs	r3, #0
 800776a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <prvProcessTimerOrBlockTask+0x94>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	4619      	mov	r1, r3
 800777a:	f7fe fc5f 	bl	800603c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800777e:	f7fe fedb 	bl	8006538 <xTaskResumeAll>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <prvProcessTimerOrBlockTask+0x98>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
}
 8007798:	e001      	b.n	800779e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800779a:	f7fe fecd 	bl	8006538 <xTaskResumeAll>
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20001608 	.word	0x20001608
 80077ac:	2000160c 	.word	0x2000160c
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <prvGetNextExpireTime+0x44>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <prvGetNextExpireTime+0x16>
 80077c6:	2201      	movs	r2, #1
 80077c8:	e000      	b.n	80077cc <prvGetNextExpireTime+0x18>
 80077ca:	2200      	movs	r2, #0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <prvGetNextExpireTime+0x44>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e001      	b.n	80077e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077e8:	68fb      	ldr	r3, [r7, #12]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	20001604 	.word	0x20001604

080077fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007804:	f7fe ff36 	bl	8006674 <xTaskGetTickCount>
 8007808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <prvSampleTimeNow+0x3c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	429a      	cmp	r2, r3
 8007812:	d205      	bcs.n	8007820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007814:	f000 f936 	bl	8007a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e002      	b.n	8007826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007826:	4a04      	ldr	r2, [pc, #16]	; (8007838 <prvSampleTimeNow+0x3c>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800782c:	68fb      	ldr	r3, [r7, #12]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20001614 	.word	0x20001614

0800783c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	429a      	cmp	r2, r3
 8007860:	d812      	bhi.n	8007888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	1ad2      	subs	r2, r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e01b      	b.n	80078ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007876:	4b10      	ldr	r3, [pc, #64]	; (80078b8 <prvInsertTimerInActiveList+0x7c>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3304      	adds	r3, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7fd fcaa 	bl	80051da <vListInsert>
 8007886:	e012      	b.n	80078ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d206      	bcs.n	800789e <prvInsertTimerInActiveList+0x62>
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d302      	bcc.n	800789e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007898:	2301      	movs	r3, #1
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	e007      	b.n	80078ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800789e:	4b07      	ldr	r3, [pc, #28]	; (80078bc <prvInsertTimerInActiveList+0x80>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fd fc96 	bl	80051da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078ae:	697b      	ldr	r3, [r7, #20]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20001608 	.word	0x20001608
 80078bc:	20001604 	.word	0x20001604

080078c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078c6:	e0ca      	b.n	8007a5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	da18      	bge.n	8007900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078ce:	1d3b      	adds	r3, r7, #4
 80078d0:	3304      	adds	r3, #4
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	61fb      	str	r3, [r7, #28]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f6:	6850      	ldr	r0, [r2, #4]
 80078f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078fa:	6892      	ldr	r2, [r2, #8]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f2c0 80aa 	blt.w	8007a5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	3304      	adds	r3, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7fd fc97 	bl	800524c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800791e:	463b      	mov	r3, r7
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff ff6b 	bl	80077fc <prvSampleTimeNow>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b09      	cmp	r3, #9
 800792c:	f200 8097 	bhi.w	8007a5e <prvProcessReceivedCommands+0x19e>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <prvProcessReceivedCommands+0x78>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	08007961 	.word	0x08007961
 800793c:	08007961 	.word	0x08007961
 8007940:	08007961 	.word	0x08007961
 8007944:	080079d5 	.word	0x080079d5
 8007948:	080079e9 	.word	0x080079e9
 800794c:	08007a33 	.word	0x08007a33
 8007950:	08007961 	.word	0x08007961
 8007954:	08007961 	.word	0x08007961
 8007958:	080079d5 	.word	0x080079d5
 800795c:	080079e9 	.word	0x080079e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	18d1      	adds	r1, r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007980:	f7ff ff5c 	bl	800783c <prvInsertTimerInActiveList>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d069      	beq.n	8007a5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d05e      	beq.n	8007a5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	441a      	add	r2, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2300      	movs	r3, #0
 80079ae:	2100      	movs	r1, #0
 80079b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b2:	f7ff fe05 	bl	80075c0 <xTimerGenericCommand>
 80079b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d14f      	bne.n	8007a5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61bb      	str	r3, [r7, #24]
}
 80079d0:	bf00      	nop
 80079d2:	e7fe      	b.n	80079d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80079e6:	e03a      	b.n	8007a5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	617b      	str	r3, [r7, #20]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	18d1      	adds	r1, r2, r3
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2c:	f7ff ff06 	bl	800783c <prvInsertTimerInActiveList>
					break;
 8007a30:	e015      	b.n	8007a5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a42:	f000 fbdd 	bl	8008200 <vPortFree>
 8007a46:	e00a      	b.n	8007a5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a5a:	e000      	b.n	8007a5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <prvProcessReceivedCommands+0x1c0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1d39      	adds	r1, r7, #4
 8007a64:	2200      	movs	r2, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fd ff5c 	bl	8005924 <xQueueReceive>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f47f af2a 	bne.w	80078c8 <prvProcessReceivedCommands+0x8>
	}
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3730      	adds	r7, #48	; 0x30
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	2000160c 	.word	0x2000160c

08007a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a8a:	e048      	b.n	8007b1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a8c:	4b2d      	ldr	r3, [pc, #180]	; (8007b44 <prvSwitchTimerLists+0xc0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a96:	4b2b      	ldr	r3, [pc, #172]	; (8007b44 <prvSwitchTimerLists+0xc0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fd fbd1 	bl	800524c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d02e      	beq.n	8007b1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d90e      	bls.n	8007af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ade:	4b19      	ldr	r3, [pc, #100]	; (8007b44 <prvSwitchTimerLists+0xc0>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fd fb76 	bl	80051da <vListInsert>
 8007aee:	e016      	b.n	8007b1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fd60 	bl	80075c0 <xTimerGenericCommand>
 8007b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	603b      	str	r3, [r7, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <prvSwitchTimerLists+0xc0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1b1      	bne.n	8007a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <prvSwitchTimerLists+0xc0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b2e:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <prvSwitchTimerLists+0xc0>)
 8007b34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b36:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	6013      	str	r3, [r2, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20001604 	.word	0x20001604
 8007b48:	20001608 	.word	0x20001608

08007b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b52:	f000 f967 	bl	8007e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b56:	4b15      	ldr	r3, [pc, #84]	; (8007bac <prvCheckForValidListAndQueue+0x60>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d120      	bne.n	8007ba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b5e:	4814      	ldr	r0, [pc, #80]	; (8007bb0 <prvCheckForValidListAndQueue+0x64>)
 8007b60:	f7fd faea 	bl	8005138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b64:	4813      	ldr	r0, [pc, #76]	; (8007bb4 <prvCheckForValidListAndQueue+0x68>)
 8007b66:	f7fd fae7 	bl	8005138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <prvCheckForValidListAndQueue+0x6c>)
 8007b6c:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <prvCheckForValidListAndQueue+0x64>)
 8007b6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b70:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <prvCheckForValidListAndQueue+0x70>)
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <prvCheckForValidListAndQueue+0x68>)
 8007b74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b76:	2300      	movs	r3, #0
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <prvCheckForValidListAndQueue+0x74>)
 8007b7c:	4a11      	ldr	r2, [pc, #68]	; (8007bc4 <prvCheckForValidListAndQueue+0x78>)
 8007b7e:	2110      	movs	r1, #16
 8007b80:	200a      	movs	r0, #10
 8007b82:	f7fd fbf5 	bl	8005370 <xQueueGenericCreateStatic>
 8007b86:	4603      	mov	r3, r0
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <prvCheckForValidListAndQueue+0x60>)
 8007b8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b8c:	4b07      	ldr	r3, [pc, #28]	; (8007bac <prvCheckForValidListAndQueue+0x60>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <prvCheckForValidListAndQueue+0x60>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	490b      	ldr	r1, [pc, #44]	; (8007bc8 <prvCheckForValidListAndQueue+0x7c>)
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe f9fa 	bl	8005f94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba0:	f000 f970 	bl	8007e84 <vPortExitCritical>
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000160c 	.word	0x2000160c
 8007bb0:	200015dc 	.word	0x200015dc
 8007bb4:	200015f0 	.word	0x200015f0
 8007bb8:	20001604 	.word	0x20001604
 8007bbc:	20001608 	.word	0x20001608
 8007bc0:	200016b8 	.word	0x200016b8
 8007bc4:	20001618 	.word	0x20001618
 8007bc8:	08008544 	.word	0x08008544

08007bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3b04      	subs	r3, #4
 8007bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3b04      	subs	r3, #4
 8007bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0201 	bic.w	r2, r3, #1
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3b04      	subs	r3, #4
 8007bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bfc:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <pxPortInitialiseStack+0x64>)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3b14      	subs	r3, #20
 8007c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3b04      	subs	r3, #4
 8007c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f06f 0202 	mvn.w	r2, #2
 8007c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3b20      	subs	r3, #32
 8007c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c22:	68fb      	ldr	r3, [r7, #12]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	08007c35 	.word	0x08007c35

08007c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <prvTaskExitError+0x54>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c46:	d00a      	beq.n	8007c5e <prvTaskExitError+0x2a>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	60fb      	str	r3, [r7, #12]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <prvTaskExitError+0x28>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60bb      	str	r3, [r7, #8]
}
 8007c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c72:	bf00      	nop
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0fc      	beq.n	8007c74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	2000000c 	.word	0x2000000c
 8007c8c:	00000000 	.word	0x00000000

08007c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <pxCurrentTCBConst2>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	6808      	ldr	r0, [r1, #0]
 8007c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	f380 8809 	msr	PSP, r0
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	4770      	bx	lr
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst2>:
 8007cb0:	200010dc 	.word	0x200010dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cb8:	4808      	ldr	r0, [pc, #32]	; (8007cdc <prvPortStartFirstTask+0x24>)
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	6800      	ldr	r0, [r0, #0]
 8007cbe:	f380 8808 	msr	MSP, r0
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8814 	msr	CONTROL, r0
 8007cca:	b662      	cpsie	i
 8007ccc:	b661      	cpsie	f
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	df00      	svc	0
 8007cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cda:	bf00      	nop
 8007cdc:	e000ed08 	.word	0xe000ed08

08007ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ce6:	4b46      	ldr	r3, [pc, #280]	; (8007e00 <xPortStartScheduler+0x120>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a46      	ldr	r2, [pc, #280]	; (8007e04 <xPortStartScheduler+0x124>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d10a      	bne.n	8007d06 <xPortStartScheduler+0x26>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d06:	4b3e      	ldr	r3, [pc, #248]	; (8007e00 <xPortStartScheduler+0x120>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a3f      	ldr	r2, [pc, #252]	; (8007e08 <xPortStartScheduler+0x128>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d10a      	bne.n	8007d26 <xPortStartScheduler+0x46>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d26:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <xPortStartScheduler+0x12c>)
 8007d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	4b31      	ldr	r3, [pc, #196]	; (8007e10 <xPortStartScheduler+0x130>)
 8007d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d4e:	4b31      	ldr	r3, [pc, #196]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d50:	2207      	movs	r2, #7
 8007d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d54:	e009      	b.n	8007d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d56:	4b2f      	ldr	r3, [pc, #188]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	4a2d      	ldr	r2, [pc, #180]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d0ef      	beq.n	8007d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d76:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f1c3 0307 	rsb	r3, r3, #7
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d00a      	beq.n	8007d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	60bb      	str	r3, [r7, #8]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <xPortStartScheduler+0x134>)
 8007da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <xPortStartScheduler+0x134>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <xPortStartScheduler+0x134>)
 8007dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007db6:	4b18      	ldr	r3, [pc, #96]	; (8007e18 <xPortStartScheduler+0x138>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007dce:	f000 f8dd 	bl	8007f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <xPortStartScheduler+0x13c>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dd8:	f000 f8fc 	bl	8007fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <xPortStartScheduler+0x140>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <xPortStartScheduler+0x140>)
 8007de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007de8:	f7ff ff66 	bl	8007cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dec:	f7fe fd1e 	bl	800682c <vTaskSwitchContext>
	prvTaskExitError();
 8007df0:	f7ff ff20 	bl	8007c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	e000ed00 	.word	0xe000ed00
 8007e04:	410fc271 	.word	0x410fc271
 8007e08:	410fc270 	.word	0x410fc270
 8007e0c:	e000e400 	.word	0xe000e400
 8007e10:	20001708 	.word	0x20001708
 8007e14:	2000170c 	.word	0x2000170c
 8007e18:	e000ed20 	.word	0xe000ed20
 8007e1c:	2000000c 	.word	0x2000000c
 8007e20:	e000ef34 	.word	0xe000ef34

08007e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	607b      	str	r3, [r7, #4]
}
 8007e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10f      	bne.n	8007e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <vPortEnterCritical+0x5c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	603b      	str	r3, [r7, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <vPortEnterCritical+0x4a>
	}
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	2000000c 	.word	0x2000000c
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <vPortExitCritical+0x50>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <vPortExitCritical+0x24>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	607b      	str	r3, [r7, #4]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <vPortExitCritical+0x42>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	f383 8811 	msr	BASEPRI, r3
}
 8007ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	2000000c 	.word	0x2000000c
	...

08007ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ee0:	f3ef 8009 	mrs	r0, PSP
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <pxCurrentTCBConst>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	f01e 0f10 	tst.w	lr, #16
 8007ef0:	bf08      	it	eq
 8007ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efa:	6010      	str	r0, [r2, #0]
 8007efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f04:	f380 8811 	msr	BASEPRI, r0
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f7fe fc8c 	bl	800682c <vTaskSwitchContext>
 8007f14:	f04f 0000 	mov.w	r0, #0
 8007f18:	f380 8811 	msr	BASEPRI, r0
 8007f1c:	bc09      	pop	{r0, r3}
 8007f1e:	6819      	ldr	r1, [r3, #0]
 8007f20:	6808      	ldr	r0, [r1, #0]
 8007f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f26:	f01e 0f10 	tst.w	lr, #16
 8007f2a:	bf08      	it	eq
 8007f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f30:	f380 8809 	msr	PSP, r0
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	f3af 8000 	nop.w

08007f40 <pxCurrentTCBConst>:
 8007f40:	200010dc 	.word	0x200010dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f62:	f7fe fba9 	bl	80066b8 <xTaskIncrementTick>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <xPortSysTickHandler+0x40>)
 8007f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	2300      	movs	r3, #0
 8007f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f383 8811 	msr	BASEPRI, r3
}
 8007f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <vPortSetupTimerInterrupt+0x34>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <vPortSetupTimerInterrupt+0x38>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <vPortSetupTimerInterrupt+0x3c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <vPortSetupTimerInterrupt+0x40>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	099b      	lsrs	r3, r3, #6
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <vPortSetupTimerInterrupt+0x44>)
 8007faa:	3b01      	subs	r3, #1
 8007fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fae:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <vPortSetupTimerInterrupt+0x34>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	e000e010 	.word	0xe000e010
 8007fc4:	e000e018 	.word	0xe000e018
 8007fc8:	20000000 	.word	0x20000000
 8007fcc:	10624dd3 	.word	0x10624dd3
 8007fd0:	e000e014 	.word	0xe000e014

08007fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fe4 <vPortEnableVFP+0x10>
 8007fd8:	6801      	ldr	r1, [r0, #0]
 8007fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fde:	6001      	str	r1, [r0, #0]
 8007fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fe2:	bf00      	nop
 8007fe4:	e000ed88 	.word	0xe000ed88

08007fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fee:	f3ef 8305 	mrs	r3, IPSR
 8007ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b0f      	cmp	r3, #15
 8007ff8:	d914      	bls.n	8008024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <vPortValidateInterruptPriority+0x70>)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008004:	4b15      	ldr	r3, [pc, #84]	; (800805c <vPortValidateInterruptPriority+0x74>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	7afa      	ldrb	r2, [r7, #11]
 800800a:	429a      	cmp	r2, r3
 800800c:	d20a      	bcs.n	8008024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <vPortValidateInterruptPriority+0x78>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800802c:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <vPortValidateInterruptPriority+0x7c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d90a      	bls.n	800804a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	603b      	str	r3, [r7, #0]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <vPortValidateInterruptPriority+0x60>
	}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	e000e3f0 	.word	0xe000e3f0
 800805c:	20001708 	.word	0x20001708
 8008060:	e000ed0c 	.word	0xe000ed0c
 8008064:	2000170c 	.word	0x2000170c

08008068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008074:	f7fe fa52 	bl	800651c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008078:	4b5b      	ldr	r3, [pc, #364]	; (80081e8 <pvPortMalloc+0x180>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008080:	f000 f920 	bl	80082c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008084:	4b59      	ldr	r3, [pc, #356]	; (80081ec <pvPortMalloc+0x184>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 8093 	bne.w	80081b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01d      	beq.n	80080d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008098:	2208      	movs	r2, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d014      	beq.n	80080d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f023 0307 	bic.w	r3, r3, #7
 80080b0:	3308      	adds	r3, #8
 80080b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <pvPortMalloc+0x6c>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	617b      	str	r3, [r7, #20]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d06e      	beq.n	80081b8 <pvPortMalloc+0x150>
 80080da:	4b45      	ldr	r3, [pc, #276]	; (80081f0 <pvPortMalloc+0x188>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d869      	bhi.n	80081b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080e4:	4b43      	ldr	r3, [pc, #268]	; (80081f4 <pvPortMalloc+0x18c>)
 80080e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080e8:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <pvPortMalloc+0x18c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ee:	e004      	b.n	80080fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d903      	bls.n	800810c <pvPortMalloc+0xa4>
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f1      	bne.n	80080f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800810c:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <pvPortMalloc+0x180>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008112:	429a      	cmp	r2, r3
 8008114:	d050      	beq.n	80081b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2208      	movs	r2, #8
 800811c:	4413      	add	r3, r2
 800811e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	2308      	movs	r3, #8
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	429a      	cmp	r2, r3
 8008136:	d91f      	bls.n	8008178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4413      	add	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <pvPortMalloc+0xf8>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	613b      	str	r3, [r7, #16]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	1ad2      	subs	r2, r2, r3
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008172:	69b8      	ldr	r0, [r7, #24]
 8008174:	f000 f908 	bl	8008388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008178:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <pvPortMalloc+0x188>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <pvPortMalloc+0x188>)
 8008184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008186:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <pvPortMalloc+0x188>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <pvPortMalloc+0x190>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d203      	bcs.n	800819a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008192:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <pvPortMalloc+0x188>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a18      	ldr	r2, [pc, #96]	; (80081f8 <pvPortMalloc+0x190>)
 8008198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	4b13      	ldr	r3, [pc, #76]	; (80081ec <pvPortMalloc+0x184>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <pvPortMalloc+0x194>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a11      	ldr	r2, [pc, #68]	; (80081fc <pvPortMalloc+0x194>)
 80081b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081b8:	f7fe f9be 	bl	8006538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <pvPortMalloc+0x174>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	60fb      	str	r3, [r7, #12]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <pvPortMalloc+0x172>
	return pvReturn;
 80081dc:	69fb      	ldr	r3, [r7, #28]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3728      	adds	r7, #40	; 0x28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20005318 	.word	0x20005318
 80081ec:	2000532c 	.word	0x2000532c
 80081f0:	2000531c 	.word	0x2000531c
 80081f4:	20005310 	.word	0x20005310
 80081f8:	20005320 	.word	0x20005320
 80081fc:	20005324 	.word	0x20005324

08008200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d04d      	beq.n	80082ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008212:	2308      	movs	r3, #8
 8008214:	425b      	negs	r3, r3
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4413      	add	r3, r2
 800821a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <vPortFree+0xb8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4013      	ands	r3, r2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <vPortFree+0x44>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <vPortFree+0x62>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	60bb      	str	r3, [r7, #8]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <vPortFree+0xb8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01e      	beq.n	80082ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11a      	bne.n	80082ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <vPortFree+0xb8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	43db      	mvns	r3, r3
 8008282:	401a      	ands	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008288:	f7fe f948 	bl	800651c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <vPortFree+0xbc>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4413      	add	r3, r2
 8008296:	4a09      	ldr	r2, [pc, #36]	; (80082bc <vPortFree+0xbc>)
 8008298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800829a:	6938      	ldr	r0, [r7, #16]
 800829c:	f000 f874 	bl	8008388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <vPortFree+0xc0>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a06      	ldr	r2, [pc, #24]	; (80082c0 <vPortFree+0xc0>)
 80082a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082aa:	f7fe f945 	bl	8006538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082ae:	bf00      	nop
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	2000532c 	.word	0x2000532c
 80082bc:	2000531c 	.word	0x2000531c
 80082c0:	20005328 	.word	0x20005328

080082c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80082ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082d0:	4b27      	ldr	r3, [pc, #156]	; (8008370 <prvHeapInit+0xac>)
 80082d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00c      	beq.n	80082f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3307      	adds	r3, #7
 80082e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <prvHeapInit+0xac>)
 80082f4:	4413      	add	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082fc:	4a1d      	ldr	r2, [pc, #116]	; (8008374 <prvHeapInit+0xb0>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008302:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <prvHeapInit+0xb0>)
 8008304:	2200      	movs	r2, #0
 8008306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008310:	2208      	movs	r2, #8
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0307 	bic.w	r3, r3, #7
 800831e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a15      	ldr	r2, [pc, #84]	; (8008378 <prvHeapInit+0xb4>)
 8008324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008326:	4b14      	ldr	r3, [pc, #80]	; (8008378 <prvHeapInit+0xb4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800832e:	4b12      	ldr	r3, [pc, #72]	; (8008378 <prvHeapInit+0xb4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <prvHeapInit+0xb4>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a0a      	ldr	r2, [pc, #40]	; (800837c <prvHeapInit+0xb8>)
 8008352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	4a09      	ldr	r2, [pc, #36]	; (8008380 <prvHeapInit+0xbc>)
 800835a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <prvHeapInit+0xc0>)
 800835e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20001710 	.word	0x20001710
 8008374:	20005310 	.word	0x20005310
 8008378:	20005318 	.word	0x20005318
 800837c:	20005320 	.word	0x20005320
 8008380:	2000531c 	.word	0x2000531c
 8008384:	2000532c 	.word	0x2000532c

08008388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008390:	4b28      	ldr	r3, [pc, #160]	; (8008434 <prvInsertBlockIntoFreeList+0xac>)
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e002      	b.n	800839c <prvInsertBlockIntoFreeList+0x14>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d8f7      	bhi.n	8008396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d108      	bne.n	80083ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	441a      	add	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	441a      	add	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d118      	bne.n	8008410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b15      	ldr	r3, [pc, #84]	; (8008438 <prvInsertBlockIntoFreeList+0xb0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d00d      	beq.n	8008406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	441a      	add	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	e008      	b.n	8008418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008406:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <prvInsertBlockIntoFreeList+0xb0>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e003      	b.n	8008418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d002      	beq.n	8008426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20005310 	.word	0x20005310
 8008438:	20005318 	.word	0x20005318

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4d0d      	ldr	r5, [pc, #52]	; (8008474 <__libc_init_array+0x38>)
 8008440:	4c0d      	ldr	r4, [pc, #52]	; (8008478 <__libc_init_array+0x3c>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	2600      	movs	r6, #0
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	4d0b      	ldr	r5, [pc, #44]	; (800847c <__libc_init_array+0x40>)
 800844e:	4c0c      	ldr	r4, [pc, #48]	; (8008480 <__libc_init_array+0x44>)
 8008450:	f000 f82e 	bl	80084b0 <_init>
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	2600      	movs	r6, #0
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	08008608 	.word	0x08008608
 8008478:	08008608 	.word	0x08008608
 800847c:	08008608 	.word	0x08008608
 8008480:	0800860c 	.word	0x0800860c

08008484 <memcpy>:
 8008484:	440a      	add	r2, r1
 8008486:	4291      	cmp	r1, r2
 8008488:	f100 33ff 	add.w	r3, r0, #4294967295
 800848c:	d100      	bne.n	8008490 <memcpy+0xc>
 800848e:	4770      	bx	lr
 8008490:	b510      	push	{r4, lr}
 8008492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800849a:	4291      	cmp	r1, r2
 800849c:	d1f9      	bne.n	8008492 <memcpy+0xe>
 800849e:	bd10      	pop	{r4, pc}

080084a0 <memset>:
 80084a0:	4402      	add	r2, r0
 80084a2:	4603      	mov	r3, r0
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d100      	bne.n	80084aa <memset+0xa>
 80084a8:	4770      	bx	lr
 80084aa:	f803 1b01 	strb.w	r1, [r3], #1
 80084ae:	e7f9      	b.n	80084a4 <memset+0x4>

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
